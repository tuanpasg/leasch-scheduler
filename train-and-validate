{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":12129275,"sourceType":"datasetVersion","datasetId":7637915}],"dockerImageVersionId":31040,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Install Libraries","metadata":{}},{"cell_type":"code","source":"!pip install stable-baselines3[extra] gym sionna","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-08T13:38:09.351552Z","iopub.execute_input":"2025-08-08T13:38:09.352144Z","iopub.status.idle":"2025-08-08T13:40:35.531519Z","shell.execute_reply.started":"2025-08-08T13:38:09.352110Z","shell.execute_reply":"2025-08-08T13:40:35.530251Z"}},"outputs":[{"name":"stdout","text":"Requirement already satisfied: gym in /usr/local/lib/python3.11/dist-packages (0.25.2)\nCollecting sionna\n  Downloading sionna-1.1.0-py3-none-any.whl.metadata (6.3 kB)\nRequirement already satisfied: stable-baselines3[extra] in /usr/local/lib/python3.11/dist-packages (2.1.0)\nRequirement already satisfied: gymnasium<0.30,>=0.28.1 in /usr/local/lib/python3.11/dist-packages (from stable-baselines3[extra]) (0.29.0)\nRequirement already satisfied: numpy>=1.20 in /usr/local/lib/python3.11/dist-packages (from stable-baselines3[extra]) (1.26.4)\nRequirement already satisfied: torch>=1.13 in /usr/local/lib/python3.11/dist-packages (from stable-baselines3[extra]) (2.6.0+cu124)\nRequirement already satisfied: cloudpickle in /usr/local/lib/python3.11/dist-packages (from stable-baselines3[extra]) (3.1.1)\nRequirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (from stable-baselines3[extra]) (2.2.3)\nRequirement already satisfied: matplotlib in /usr/local/lib/python3.11/dist-packages (from stable-baselines3[extra]) (3.7.2)\nRequirement already satisfied: opencv-python in /usr/local/lib/python3.11/dist-packages (from stable-baselines3[extra]) (4.11.0.86)\nRequirement already satisfied: pygame in /usr/local/lib/python3.11/dist-packages (from stable-baselines3[extra]) (2.6.1)\nRequirement already satisfied: tensorboard>=2.9.1 in /usr/local/lib/python3.11/dist-packages (from stable-baselines3[extra]) (2.18.0)\nRequirement already satisfied: psutil in /usr/local/lib/python3.11/dist-packages (from stable-baselines3[extra]) (7.0.0)\nRequirement already satisfied: tqdm in /usr/local/lib/python3.11/dist-packages (from stable-baselines3[extra]) (4.67.1)\nRequirement already satisfied: rich in /usr/local/lib/python3.11/dist-packages (from stable-baselines3[extra]) (14.0.0)\nCollecting shimmy~=1.1.0 (from shimmy[atari]~=1.1.0; extra == \"extra\"->stable-baselines3[extra])\n  Downloading Shimmy-1.1.0-py3-none-any.whl.metadata (3.3 kB)\nRequirement already satisfied: pillow in /usr/local/lib/python3.11/dist-packages (from stable-baselines3[extra]) (11.1.0)\nCollecting autorom~=0.6.1 (from autorom[accept-rom-license]~=0.6.1; extra == \"extra\"->stable-baselines3[extra])\n  Downloading AutoROM-0.6.1-py3-none-any.whl.metadata (2.4 kB)\nRequirement already satisfied: gym-notices>=0.0.4 in /usr/local/lib/python3.11/dist-packages (from gym) (0.0.8)\nCollecting sionna-rt==1.1.0 (from sionna)\n  Downloading sionna_rt-1.1.0-py3-none-any.whl.metadata (4.8 kB)\nRequirement already satisfied: tensorflow!=2.16,!=2.17,>=2.14 in /usr/local/lib/python3.11/dist-packages (from sionna) (2.18.0)\nRequirement already satisfied: scipy>=1.14.1 in /usr/local/lib/python3.11/dist-packages (from sionna) (1.15.2)\nCollecting matplotlib (from stable-baselines3[extra])\n  Downloading matplotlib-3.10.5-cp311-cp311-manylinux2014_x86_64.manylinux_2_17_x86_64.whl.metadata (11 kB)\nRequirement already satisfied: importlib_resources>=6.4.5 in /usr/local/lib/python3.11/dist-packages (from sionna) (6.5.2)\nCollecting mitsuba==3.6.2 (from sionna-rt==1.1.0->sionna)\n  Downloading mitsuba-3.6.2-cp311-cp311-manylinux2014_x86_64.manylinux_2_17_x86_64.whl.metadata (6.9 kB)\nCollecting drjit==1.0.3 (from sionna-rt==1.1.0->sionna)\n  Downloading drjit-1.0.3-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (7.0 kB)\nRequirement already satisfied: ipywidgets>=8.1.5 in /usr/local/lib/python3.11/dist-packages (from sionna-rt==1.1.0->sionna) (8.1.5)\nCollecting pythreejs>=2.4.2 (from sionna-rt==1.1.0->sionna)\n  Downloading pythreejs-2.4.2-py3-none-any.whl.metadata (5.4 kB)\nRequirement already satisfied: typing-extensions>=4.12.2 in /usr/local/lib/python3.11/dist-packages (from sionna-rt==1.1.0->sionna) (4.13.2)\nRequirement already satisfied: click in /usr/local/lib/python3.11/dist-packages (from autorom~=0.6.1->autorom[accept-rom-license]~=0.6.1; extra == \"extra\"->stable-baselines3[extra]) (8.1.8)\nRequirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (from autorom~=0.6.1->autorom[accept-rom-license]~=0.6.1; extra == \"extra\"->stable-baselines3[extra]) (2.32.3)\nCollecting AutoROM.accept-rom-license (from autorom[accept-rom-license]~=0.6.1; extra == \"extra\"->stable-baselines3[extra])\n  Downloading AutoROM.accept-rom-license-0.6.1.tar.gz (434 kB)\n\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m434.7/434.7 kB\u001b[0m \u001b[31m7.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0ma \u001b[36m0:00:01\u001b[0m\n\u001b[?25h  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\n  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\n  Preparing metadata (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\nRequirement already satisfied: farama-notifications>=0.0.1 in /usr/local/lib/python3.11/dist-packages (from gymnasium<0.30,>=0.28.1->stable-baselines3[extra]) (0.0.4)\nRequirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib->stable-baselines3[extra]) (1.3.1)\nRequirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib->stable-baselines3[extra]) (0.12.1)\nRequirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib->stable-baselines3[extra]) (4.57.0)\nRequirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib->stable-baselines3[extra]) (1.4.8)\nRequirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib->stable-baselines3[extra]) (25.0)\nRequirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib->stable-baselines3[extra]) (3.0.9)\nRequirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.11/dist-packages (from matplotlib->stable-baselines3[extra]) (2.9.0.post0)\nRequirement already satisfied: mkl_fft in /usr/local/lib/python3.11/dist-packages (from numpy>=1.20->stable-baselines3[extra]) (1.3.8)\nRequirement already satisfied: mkl_random in /usr/local/lib/python3.11/dist-packages (from numpy>=1.20->stable-baselines3[extra]) (1.2.4)\nRequirement already satisfied: mkl_umath in /usr/local/lib/python3.11/dist-packages (from numpy>=1.20->stable-baselines3[extra]) (0.1.1)\nRequirement already satisfied: mkl in /usr/local/lib/python3.11/dist-packages (from numpy>=1.20->stable-baselines3[extra]) (2025.1.0)\nRequirement already satisfied: tbb4py in /usr/local/lib/python3.11/dist-packages (from numpy>=1.20->stable-baselines3[extra]) (2022.1.0)\nRequirement already satisfied: mkl-service in /usr/local/lib/python3.11/dist-packages (from numpy>=1.20->stable-baselines3[extra]) (2.4.1)\nCollecting ale-py~=0.8.1 (from shimmy[atari]~=1.1.0; extra == \"extra\"->stable-baselines3[extra])\n  Downloading ale_py-0.8.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (8.1 kB)\nRequirement already satisfied: absl-py>=0.4 in /usr/local/lib/python3.11/dist-packages (from tensorboard>=2.9.1->stable-baselines3[extra]) (1.4.0)\nRequirement already satisfied: grpcio>=1.48.2 in /usr/local/lib/python3.11/dist-packages (from tensorboard>=2.9.1->stable-baselines3[extra]) (1.72.0rc1)\nRequirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.11/dist-packages (from tensorboard>=2.9.1->stable-baselines3[extra]) (3.7)\nRequirement already satisfied: protobuf!=4.24.0,>=3.19.6 in /usr/local/lib/python3.11/dist-packages (from tensorboard>=2.9.1->stable-baselines3[extra]) (3.20.3)\nRequirement already satisfied: setuptools>=41.0.0 in /usr/local/lib/python3.11/dist-packages (from tensorboard>=2.9.1->stable-baselines3[extra]) (75.2.0)\nRequirement already satisfied: six>1.9 in /usr/local/lib/python3.11/dist-packages (from tensorboard>=2.9.1->stable-baselines3[extra]) (1.17.0)\nRequirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /usr/local/lib/python3.11/dist-packages (from tensorboard>=2.9.1->stable-baselines3[extra]) (0.7.2)\nRequirement already satisfied: werkzeug>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from tensorboard>=2.9.1->stable-baselines3[extra]) (3.1.3)\nRequirement already satisfied: astunparse>=1.6.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow!=2.16,!=2.17,>=2.14->sionna) (1.6.3)\nRequirement already satisfied: flatbuffers>=24.3.25 in /usr/local/lib/python3.11/dist-packages (from tensorflow!=2.16,!=2.17,>=2.14->sionna) (25.2.10)\nRequirement already satisfied: gast!=0.5.0,!=0.5.1,!=0.5.2,>=0.2.1 in /usr/local/lib/python3.11/dist-packages (from tensorflow!=2.16,!=2.17,>=2.14->sionna) (0.6.0)\nRequirement already satisfied: google-pasta>=0.1.1 in /usr/local/lib/python3.11/dist-packages (from tensorflow!=2.16,!=2.17,>=2.14->sionna) (0.2.0)\nRequirement already satisfied: libclang>=13.0.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow!=2.16,!=2.17,>=2.14->sionna) (18.1.1)\nRequirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.11/dist-packages (from tensorflow!=2.16,!=2.17,>=2.14->sionna) (3.4.0)\nRequirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow!=2.16,!=2.17,>=2.14->sionna) (3.0.1)\nRequirement already satisfied: wrapt>=1.11.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow!=2.16,!=2.17,>=2.14->sionna) (1.17.2)\nRequirement already satisfied: keras>=3.5.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow!=2.16,!=2.17,>=2.14->sionna) (3.8.0)\nRequirement already satisfied: h5py>=3.11.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow!=2.16,!=2.17,>=2.14->sionna) (3.13.0)\nRequirement already satisfied: ml-dtypes<0.5.0,>=0.4.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow!=2.16,!=2.17,>=2.14->sionna) (0.4.1)\nRequirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /usr/local/lib/python3.11/dist-packages (from tensorflow!=2.16,!=2.17,>=2.14->sionna) (0.37.1)\nRequirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from torch>=1.13->stable-baselines3[extra]) (3.18.0)\nRequirement already satisfied: networkx in /usr/local/lib/python3.11/dist-packages (from torch>=1.13->stable-baselines3[extra]) (3.4.2)\nRequirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from torch>=1.13->stable-baselines3[extra]) (3.1.6)\nRequirement already satisfied: fsspec in /usr/local/lib/python3.11/dist-packages (from torch>=1.13->stable-baselines3[extra]) (2025.3.2)\nRequirement already satisfied: nvidia-cuda-nvrtc-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch>=1.13->stable-baselines3[extra]) (12.4.127)\nRequirement already satisfied: nvidia-cuda-runtime-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch>=1.13->stable-baselines3[extra]) (12.4.127)\nRequirement already satisfied: nvidia-cuda-cupti-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch>=1.13->stable-baselines3[extra]) (12.4.127)\nCollecting nvidia-cudnn-cu12==9.1.0.70 (from torch>=1.13->stable-baselines3[extra])\n  Downloading nvidia_cudnn_cu12-9.1.0.70-py3-none-manylinux2014_x86_64.whl.metadata (1.6 kB)\nCollecting nvidia-cublas-cu12==12.4.5.8 (from torch>=1.13->stable-baselines3[extra])\n  Downloading nvidia_cublas_cu12-12.4.5.8-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\nCollecting nvidia-cufft-cu12==11.2.1.3 (from torch>=1.13->stable-baselines3[extra])\n  Downloading nvidia_cufft_cu12-11.2.1.3-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\nCollecting nvidia-curand-cu12==10.3.5.147 (from torch>=1.13->stable-baselines3[extra])\n  Downloading nvidia_curand_cu12-10.3.5.147-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\nCollecting nvidia-cusolver-cu12==11.6.1.9 (from torch>=1.13->stable-baselines3[extra])\n  Downloading nvidia_cusolver_cu12-11.6.1.9-py3-none-manylinux2014_x86_64.whl.metadata (1.6 kB)\nCollecting nvidia-cusparse-cu12==12.3.1.170 (from torch>=1.13->stable-baselines3[extra])\n  Downloading nvidia_cusparse_cu12-12.3.1.170-py3-none-manylinux2014_x86_64.whl.metadata (1.6 kB)\nRequirement already satisfied: nvidia-cusparselt-cu12==0.6.2 in /usr/local/lib/python3.11/dist-packages (from torch>=1.13->stable-baselines3[extra]) (0.6.2)\nRequirement already satisfied: nvidia-nccl-cu12==2.21.5 in /usr/local/lib/python3.11/dist-packages (from torch>=1.13->stable-baselines3[extra]) (2.21.5)\nRequirement already satisfied: nvidia-nvtx-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch>=1.13->stable-baselines3[extra]) (12.4.127)\nCollecting nvidia-nvjitlink-cu12==12.4.127 (from torch>=1.13->stable-baselines3[extra])\n  Downloading nvidia_nvjitlink_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\nRequirement already satisfied: triton==3.2.0 in /usr/local/lib/python3.11/dist-packages (from torch>=1.13->stable-baselines3[extra]) (3.2.0)\nRequirement already satisfied: sympy==1.13.1 in /usr/local/lib/python3.11/dist-packages (from torch>=1.13->stable-baselines3[extra]) (1.13.1)\nRequirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from sympy==1.13.1->torch>=1.13->stable-baselines3[extra]) (1.3.0)\nRequirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas->stable-baselines3[extra]) (2025.2)\nRequirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas->stable-baselines3[extra]) (2025.2)\nRequirement already satisfied: markdown-it-py>=2.2.0 in /usr/local/lib/python3.11/dist-packages (from rich->stable-baselines3[extra]) (3.0.0)\nRequirement already satisfied: pygments<3.0.0,>=2.13.0 in /usr/local/lib/python3.11/dist-packages (from rich->stable-baselines3[extra]) (2.19.1)\nRequirement already satisfied: wheel<1.0,>=0.23.0 in /usr/local/lib/python3.11/dist-packages (from astunparse>=1.6.0->tensorflow!=2.16,!=2.17,>=2.14->sionna) (0.45.1)\nRequirement already satisfied: comm>=0.1.3 in /usr/local/lib/python3.11/dist-packages (from ipywidgets>=8.1.5->sionna-rt==1.1.0->sionna) (0.2.2)\nRequirement already satisfied: ipython>=6.1.0 in /usr/local/lib/python3.11/dist-packages (from ipywidgets>=8.1.5->sionna-rt==1.1.0->sionna) (7.34.0)\nRequirement already satisfied: traitlets>=4.3.1 in /usr/local/lib/python3.11/dist-packages (from ipywidgets>=8.1.5->sionna-rt==1.1.0->sionna) (5.7.1)\nRequirement already satisfied: widgetsnbextension~=4.0.12 in /usr/local/lib/python3.11/dist-packages (from ipywidgets>=8.1.5->sionna-rt==1.1.0->sionna) (4.0.14)\nRequirement already satisfied: jupyterlab-widgets~=3.0.12 in /usr/local/lib/python3.11/dist-packages (from ipywidgets>=8.1.5->sionna-rt==1.1.0->sionna) (3.0.13)\nRequirement already satisfied: namex in /usr/local/lib/python3.11/dist-packages (from keras>=3.5.0->tensorflow!=2.16,!=2.17,>=2.14->sionna) (0.0.8)\nRequirement already satisfied: optree in /usr/local/lib/python3.11/dist-packages (from keras>=3.5.0->tensorflow!=2.16,!=2.17,>=2.14->sionna) (0.14.1)\nRequirement already satisfied: mdurl~=0.1 in /usr/local/lib/python3.11/dist-packages (from markdown-it-py>=2.2.0->rich->stable-baselines3[extra]) (0.1.2)\nCollecting ipydatawidgets>=1.1.1 (from pythreejs>=2.4.2->sionna-rt==1.1.0->sionna)\n  Downloading ipydatawidgets-4.3.5-py2.py3-none-any.whl.metadata (1.4 kB)\nRequirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests->autorom~=0.6.1->autorom[accept-rom-license]~=0.6.1; extra == \"extra\"->stable-baselines3[extra]) (3.4.2)\nRequirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests->autorom~=0.6.1->autorom[accept-rom-license]~=0.6.1; extra == \"extra\"->stable-baselines3[extra]) (3.10)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests->autorom~=0.6.1->autorom[accept-rom-license]~=0.6.1; extra == \"extra\"->stable-baselines3[extra]) (2.4.0)\nRequirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests->autorom~=0.6.1->autorom[accept-rom-license]~=0.6.1; extra == \"extra\"->stable-baselines3[extra]) (2025.4.26)\nRequirement already satisfied: MarkupSafe>=2.1.1 in /usr/local/lib/python3.11/dist-packages (from werkzeug>=1.0.1->tensorboard>=2.9.1->stable-baselines3[extra]) (3.0.2)\nRequirement already satisfied: intel-openmp<2026,>=2024 in /usr/local/lib/python3.11/dist-packages (from mkl->numpy>=1.20->stable-baselines3[extra]) (2024.2.0)\nRequirement already satisfied: tbb==2022.* in /usr/local/lib/python3.11/dist-packages (from mkl->numpy>=1.20->stable-baselines3[extra]) (2022.1.0)\nRequirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.11/dist-packages (from tbb==2022.*->mkl->numpy>=1.20->stable-baselines3[extra]) (1.3.0)\nRequirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.11/dist-packages (from mkl_umath->numpy>=1.20->stable-baselines3[extra]) (2024.2.0)\nRequirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.11/dist-packages (from intel-openmp<2026,>=2024->mkl->numpy>=1.20->stable-baselines3[extra]) (2024.2.0)\nRequirement already satisfied: traittypes>=0.2.0 in /usr/local/lib/python3.11/dist-packages (from ipydatawidgets>=1.1.1->pythreejs>=2.4.2->sionna-rt==1.1.0->sionna) (0.2.1)\nRequirement already satisfied: jedi>=0.16 in /usr/local/lib/python3.11/dist-packages (from ipython>=6.1.0->ipywidgets>=8.1.5->sionna-rt==1.1.0->sionna) (0.19.2)\nRequirement already satisfied: decorator in /usr/local/lib/python3.11/dist-packages (from ipython>=6.1.0->ipywidgets>=8.1.5->sionna-rt==1.1.0->sionna) (4.4.2)\nRequirement already satisfied: pickleshare in /usr/local/lib/python3.11/dist-packages (from ipython>=6.1.0->ipywidgets>=8.1.5->sionna-rt==1.1.0->sionna) (0.7.5)\nRequirement already satisfied: prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from ipython>=6.1.0->ipywidgets>=8.1.5->sionna-rt==1.1.0->sionna) (3.0.50)\nRequirement already satisfied: backcall in /usr/local/lib/python3.11/dist-packages (from ipython>=6.1.0->ipywidgets>=8.1.5->sionna-rt==1.1.0->sionna) (0.2.0)\nRequirement already satisfied: matplotlib-inline in /usr/local/lib/python3.11/dist-packages (from ipython>=6.1.0->ipywidgets>=8.1.5->sionna-rt==1.1.0->sionna) (0.1.7)\nRequirement already satisfied: pexpect>4.3 in /usr/local/lib/python3.11/dist-packages (from ipython>=6.1.0->ipywidgets>=8.1.5->sionna-rt==1.1.0->sionna) (4.9.0)\nRequirement already satisfied: parso<0.9.0,>=0.8.4 in /usr/local/lib/python3.11/dist-packages (from jedi>=0.16->ipython>=6.1.0->ipywidgets>=8.1.5->sionna-rt==1.1.0->sionna) (0.8.4)\nRequirement already satisfied: ptyprocess>=0.5 in /usr/local/lib/python3.11/dist-packages (from pexpect>4.3->ipython>=6.1.0->ipywidgets>=8.1.5->sionna-rt==1.1.0->sionna) (0.7.0)\nRequirement already satisfied: wcwidth in /usr/local/lib/python3.11/dist-packages (from prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0->ipython>=6.1.0->ipywidgets>=8.1.5->sionna-rt==1.1.0->sionna) (0.2.13)\nDownloading sionna-1.1.0-py3-none-any.whl (520 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m520.4/520.4 kB\u001b[0m \u001b[31m16.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading sionna_rt-1.1.0-py3-none-any.whl (8.5 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m8.5/8.5 MB\u001b[0m \u001b[31m76.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m00:01\u001b[0m\n\u001b[?25hDownloading drjit-1.0.3-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (4.3 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m4.3/4.3 MB\u001b[0m \u001b[31m64.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m\n\u001b[?25hDownloading mitsuba-3.6.2-cp311-cp311-manylinux2014_x86_64.manylinux_2_17_x86_64.whl (57.7 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m57.7/57.7 MB\u001b[0m \u001b[31m24.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m00:01\u001b[0m\n\u001b[?25hDownloading AutoROM-0.6.1-py3-none-any.whl (9.4 kB)\nDownloading matplotlib-3.10.5-cp311-cp311-manylinux2014_x86_64.manylinux_2_17_x86_64.whl (8.7 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m8.7/8.7 MB\u001b[0m \u001b[31m89.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m00:01\u001b[0m\n\u001b[?25hDownloading Shimmy-1.1.0-py3-none-any.whl (37 kB)\nDownloading nvidia_cublas_cu12-12.4.5.8-py3-none-manylinux2014_x86_64.whl (363.4 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m363.4/363.4 MB\u001b[0m \u001b[31m4.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m0:00:01\u001b[0m00:01\u001b[0m\n\u001b[?25hDownloading nvidia_cudnn_cu12-9.1.0.70-py3-none-manylinux2014_x86_64.whl (664.8 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m664.8/664.8 MB\u001b[0m \u001b[31m1.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m0:00:01\u001b[0m00:01\u001b[0m\n\u001b[?25hDownloading nvidia_cufft_cu12-11.2.1.3-py3-none-manylinux2014_x86_64.whl (211.5 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m211.5/211.5 MB\u001b[0m \u001b[31m1.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m0:00:01\u001b[0m00:01\u001b[0m\n\u001b[?25hDownloading nvidia_curand_cu12-10.3.5.147-py3-none-manylinux2014_x86_64.whl (56.3 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m56.3/56.3 MB\u001b[0m \u001b[31m24.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m00:01\u001b[0m\n\u001b[?25hDownloading nvidia_cusolver_cu12-11.6.1.9-py3-none-manylinux2014_x86_64.whl (127.9 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m127.9/127.9 MB\u001b[0m \u001b[31m11.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m00:01\u001b[0m\n\u001b[?25hDownloading nvidia_cusparse_cu12-12.3.1.170-py3-none-manylinux2014_x86_64.whl (207.5 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m207.5/207.5 MB\u001b[0m \u001b[31m7.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m0:00:01\u001b[0m00:01\u001b[0m\n\u001b[?25hDownloading nvidia_nvjitlink_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl (21.1 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m21.1/21.1 MB\u001b[0m \u001b[31m29.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m00:01\u001b[0m00:01\u001b[0mm\n\u001b[?25hDownloading ale_py-0.8.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.7 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.7/1.7 MB\u001b[0m \u001b[31m34.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m\n\u001b[?25hDownloading pythreejs-2.4.2-py3-none-any.whl (3.4 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m3.4/3.4 MB\u001b[0m \u001b[31m34.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m00:01\u001b[0m00:01\u001b[0m\n\u001b[?25hDownloading ipydatawidgets-4.3.5-py2.py3-none-any.whl (271 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m271.7/271.7 kB\u001b[0m \u001b[31m8.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hBuilding wheels for collected packages: AutoROM.accept-rom-license\n  Building wheel for AutoROM.accept-rom-license (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\n  Created wheel for AutoROM.accept-rom-license: filename=autorom_accept_rom_license-0.6.1-py3-none-any.whl size=446709 sha256=61de21ee759e9b5fc7700d87081a87282f48e411c6ad118c35570fdf64b7a1ae\n  Stored in directory: /root/.cache/pip/wheels/bc/fc/c6/8aa657c0d2089982f2dabd110efc68c61eb49831fdb7397351\nSuccessfully built AutoROM.accept-rom-license\nInstalling collected packages: nvidia-nvjitlink-cu12, nvidia-curand-cu12, nvidia-cufft-cu12, nvidia-cublas-cu12, drjit, nvidia-cusparse-cu12, nvidia-cudnn-cu12, mitsuba, AutoROM.accept-rom-license, autorom, nvidia-cusolver-cu12, ipydatawidgets, shimmy, pythreejs, matplotlib, ale-py, sionna-rt, sionna\n  Attempting uninstall: nvidia-nvjitlink-cu12\n    Found existing installation: nvidia-nvjitlink-cu12 12.9.41\n    Uninstalling nvidia-nvjitlink-cu12-12.9.41:\n      Successfully uninstalled nvidia-nvjitlink-cu12-12.9.41\n  Attempting uninstall: nvidia-curand-cu12\n    Found existing installation: nvidia-curand-cu12 10.3.10.19\n    Uninstalling nvidia-curand-cu12-10.3.10.19:\n      Successfully uninstalled nvidia-curand-cu12-10.3.10.19\n  Attempting uninstall: nvidia-cufft-cu12\n    Found existing installation: nvidia-cufft-cu12 11.4.0.6\n    Uninstalling nvidia-cufft-cu12-11.4.0.6:\n      Successfully uninstalled nvidia-cufft-cu12-11.4.0.6\n  Attempting uninstall: nvidia-cublas-cu12\n    Found existing installation: nvidia-cublas-cu12 12.9.0.13\n    Uninstalling nvidia-cublas-cu12-12.9.0.13:\n      Successfully uninstalled nvidia-cublas-cu12-12.9.0.13\n  Attempting uninstall: nvidia-cusparse-cu12\n    Found existing installation: nvidia-cusparse-cu12 12.5.9.5\n    Uninstalling nvidia-cusparse-cu12-12.5.9.5:\n      Successfully uninstalled nvidia-cusparse-cu12-12.5.9.5\n  Attempting uninstall: nvidia-cudnn-cu12\n    Found existing installation: nvidia-cudnn-cu12 9.3.0.75\n    Uninstalling nvidia-cudnn-cu12-9.3.0.75:\n      Successfully uninstalled nvidia-cudnn-cu12-9.3.0.75\n  Attempting uninstall: nvidia-cusolver-cu12\n    Found existing installation: nvidia-cusolver-cu12 11.7.4.40\n    Uninstalling nvidia-cusolver-cu12-11.7.4.40:\n      Successfully uninstalled nvidia-cusolver-cu12-11.7.4.40\n  Attempting uninstall: shimmy\n    Found existing installation: Shimmy 1.3.0\n    Uninstalling Shimmy-1.3.0:\n      Successfully uninstalled Shimmy-1.3.0\n  Attempting uninstall: matplotlib\n    Found existing installation: matplotlib 3.7.2\n    Uninstalling matplotlib-3.7.2:\n      Successfully uninstalled matplotlib-3.7.2\n  Attempting uninstall: ale-py\n    Found existing installation: ale-py 0.10.2\n    Uninstalling ale-py-0.10.2:\n      Successfully uninstalled ale-py-0.10.2\n\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\nydata-profiling 4.16.1 requires matplotlib<=3.10,>=3.5, but you have matplotlib 3.10.5 which is incompatible.\nkaggle-environments 1.16.11 requires shimmy>=1.2.1, but you have shimmy 1.1.0 which is incompatible.\ndopamine-rl 4.1.2 requires ale-py>=0.10.1, but you have ale-py 0.8.1 which is incompatible.\ndopamine-rl 4.1.2 requires gymnasium>=1.0.0, but you have gymnasium 0.29.0 which is incompatible.\nbigframes 1.42.0 requires rich<14,>=12.4.4, but you have rich 14.0.0 which is incompatible.\nmlxtend 0.23.4 requires scikit-learn>=1.3.1, but you have scikit-learn 1.2.2 which is incompatible.\u001b[0m\u001b[31m\n\u001b[0mSuccessfully installed AutoROM.accept-rom-license-0.6.1 ale-py-0.8.1 autorom-0.6.1 drjit-1.0.3 ipydatawidgets-4.3.5 matplotlib-3.10.5 mitsuba-3.6.2 nvidia-cublas-cu12-12.4.5.8 nvidia-cudnn-cu12-9.1.0.70 nvidia-cufft-cu12-11.2.1.3 nvidia-curand-cu12-10.3.5.147 nvidia-cusolver-cu12-11.6.1.9 nvidia-cusparse-cu12-12.3.1.170 nvidia-nvjitlink-cu12-12.4.127 pythreejs-2.4.2 shimmy-1.1.0 sionna-1.1.0 sionna-rt-1.1.0\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"!pip install sionna","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-08T13:41:28.335000Z","iopub.execute_input":"2025-08-08T13:41:28.335413Z","iopub.status.idle":"2025-08-08T13:41:32.782753Z","shell.execute_reply.started":"2025-08-08T13:41:28.335366Z","shell.execute_reply":"2025-08-08T13:41:32.781527Z"}},"outputs":[{"name":"stdout","text":"Requirement already satisfied: sionna in /usr/local/lib/python3.11/dist-packages (1.1.0)\nRequirement already satisfied: sionna-rt==1.1.0 in /usr/local/lib/python3.11/dist-packages (from sionna) (1.1.0)\nRequirement already satisfied: tensorflow!=2.16,!=2.17,>=2.14 in /usr/local/lib/python3.11/dist-packages (from sionna) (2.18.0)\nRequirement already satisfied: numpy<2.0,>=1.26 in /usr/local/lib/python3.11/dist-packages (from sionna) (1.26.4)\nRequirement already satisfied: scipy>=1.14.1 in /usr/local/lib/python3.11/dist-packages (from sionna) (1.15.2)\nRequirement already satisfied: matplotlib>=3.10 in /usr/local/lib/python3.11/dist-packages (from sionna) (3.10.5)\nRequirement already satisfied: importlib_resources>=6.4.5 in /usr/local/lib/python3.11/dist-packages (from sionna) (6.5.2)\nRequirement already satisfied: mitsuba==3.6.2 in /usr/local/lib/python3.11/dist-packages (from sionna-rt==1.1.0->sionna) (3.6.2)\nRequirement already satisfied: drjit==1.0.3 in /usr/local/lib/python3.11/dist-packages (from sionna-rt==1.1.0->sionna) (1.0.3)\nRequirement already satisfied: ipywidgets>=8.1.5 in /usr/local/lib/python3.11/dist-packages (from sionna-rt==1.1.0->sionna) (8.1.5)\nRequirement already satisfied: pythreejs>=2.4.2 in /usr/local/lib/python3.11/dist-packages (from sionna-rt==1.1.0->sionna) (2.4.2)\nRequirement already satisfied: typing-extensions>=4.12.2 in /usr/local/lib/python3.11/dist-packages (from sionna-rt==1.1.0->sionna) (4.13.2)\nRequirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.10->sionna) (1.3.1)\nRequirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.10->sionna) (0.12.1)\nRequirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.10->sionna) (4.57.0)\nRequirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.10->sionna) (1.4.8)\nRequirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.10->sionna) (25.0)\nRequirement already satisfied: pillow>=8 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.10->sionna) (11.1.0)\nRequirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.10->sionna) (3.0.9)\nRequirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.10->sionna) (2.9.0.post0)\nRequirement already satisfied: mkl_fft in /usr/local/lib/python3.11/dist-packages (from numpy<2.0,>=1.26->sionna) (1.3.8)\nRequirement already satisfied: mkl_random in /usr/local/lib/python3.11/dist-packages (from numpy<2.0,>=1.26->sionna) (1.2.4)\nRequirement already satisfied: mkl_umath in /usr/local/lib/python3.11/dist-packages (from numpy<2.0,>=1.26->sionna) (0.1.1)\nRequirement already satisfied: mkl in /usr/local/lib/python3.11/dist-packages (from numpy<2.0,>=1.26->sionna) (2025.1.0)\nRequirement already satisfied: tbb4py in /usr/local/lib/python3.11/dist-packages (from numpy<2.0,>=1.26->sionna) (2022.1.0)\nRequirement already satisfied: mkl-service in /usr/local/lib/python3.11/dist-packages (from numpy<2.0,>=1.26->sionna) (2.4.1)\nRequirement already satisfied: absl-py>=1.0.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow!=2.16,!=2.17,>=2.14->sionna) (1.4.0)\nRequirement already satisfied: astunparse>=1.6.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow!=2.16,!=2.17,>=2.14->sionna) (1.6.3)\nRequirement already satisfied: flatbuffers>=24.3.25 in /usr/local/lib/python3.11/dist-packages (from tensorflow!=2.16,!=2.17,>=2.14->sionna) (25.2.10)\nRequirement already satisfied: gast!=0.5.0,!=0.5.1,!=0.5.2,>=0.2.1 in /usr/local/lib/python3.11/dist-packages (from tensorflow!=2.16,!=2.17,>=2.14->sionna) (0.6.0)\nRequirement already satisfied: google-pasta>=0.1.1 in /usr/local/lib/python3.11/dist-packages (from tensorflow!=2.16,!=2.17,>=2.14->sionna) (0.2.0)\nRequirement already satisfied: libclang>=13.0.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow!=2.16,!=2.17,>=2.14->sionna) (18.1.1)\nRequirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.11/dist-packages (from tensorflow!=2.16,!=2.17,>=2.14->sionna) (3.4.0)\nRequirement already satisfied: protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<6.0.0dev,>=3.20.3 in /usr/local/lib/python3.11/dist-packages (from tensorflow!=2.16,!=2.17,>=2.14->sionna) (3.20.3)\nRequirement already satisfied: requests<3,>=2.21.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow!=2.16,!=2.17,>=2.14->sionna) (2.32.3)\nRequirement already satisfied: setuptools in /usr/local/lib/python3.11/dist-packages (from tensorflow!=2.16,!=2.17,>=2.14->sionna) (75.2.0)\nRequirement already satisfied: six>=1.12.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow!=2.16,!=2.17,>=2.14->sionna) (1.17.0)\nRequirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow!=2.16,!=2.17,>=2.14->sionna) (3.0.1)\nRequirement already satisfied: wrapt>=1.11.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow!=2.16,!=2.17,>=2.14->sionna) (1.17.2)\nRequirement already satisfied: grpcio<2.0,>=1.24.3 in /usr/local/lib/python3.11/dist-packages (from tensorflow!=2.16,!=2.17,>=2.14->sionna) (1.72.0rc1)\nRequirement already satisfied: tensorboard<2.19,>=2.18 in /usr/local/lib/python3.11/dist-packages (from tensorflow!=2.16,!=2.17,>=2.14->sionna) (2.18.0)\nRequirement already satisfied: keras>=3.5.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow!=2.16,!=2.17,>=2.14->sionna) (3.8.0)\nRequirement already satisfied: h5py>=3.11.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow!=2.16,!=2.17,>=2.14->sionna) (3.13.0)\nRequirement already satisfied: ml-dtypes<0.5.0,>=0.4.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow!=2.16,!=2.17,>=2.14->sionna) (0.4.1)\nRequirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /usr/local/lib/python3.11/dist-packages (from tensorflow!=2.16,!=2.17,>=2.14->sionna) (0.37.1)\nRequirement already satisfied: wheel<1.0,>=0.23.0 in /usr/local/lib/python3.11/dist-packages (from astunparse>=1.6.0->tensorflow!=2.16,!=2.17,>=2.14->sionna) (0.45.1)\nRequirement already satisfied: comm>=0.1.3 in /usr/local/lib/python3.11/dist-packages (from ipywidgets>=8.1.5->sionna-rt==1.1.0->sionna) (0.2.2)\nRequirement already satisfied: ipython>=6.1.0 in /usr/local/lib/python3.11/dist-packages (from ipywidgets>=8.1.5->sionna-rt==1.1.0->sionna) (7.34.0)\nRequirement already satisfied: traitlets>=4.3.1 in /usr/local/lib/python3.11/dist-packages (from ipywidgets>=8.1.5->sionna-rt==1.1.0->sionna) (5.7.1)\nRequirement already satisfied: widgetsnbextension~=4.0.12 in /usr/local/lib/python3.11/dist-packages (from ipywidgets>=8.1.5->sionna-rt==1.1.0->sionna) (4.0.14)\nRequirement already satisfied: jupyterlab-widgets~=3.0.12 in /usr/local/lib/python3.11/dist-packages (from ipywidgets>=8.1.5->sionna-rt==1.1.0->sionna) (3.0.13)\nRequirement already satisfied: rich in /usr/local/lib/python3.11/dist-packages (from keras>=3.5.0->tensorflow!=2.16,!=2.17,>=2.14->sionna) (14.0.0)\nRequirement already satisfied: namex in /usr/local/lib/python3.11/dist-packages (from keras>=3.5.0->tensorflow!=2.16,!=2.17,>=2.14->sionna) (0.0.8)\nRequirement already satisfied: optree in /usr/local/lib/python3.11/dist-packages (from keras>=3.5.0->tensorflow!=2.16,!=2.17,>=2.14->sionna) (0.14.1)\nRequirement already satisfied: ipydatawidgets>=1.1.1 in /usr/local/lib/python3.11/dist-packages (from pythreejs>=2.4.2->sionna-rt==1.1.0->sionna) (4.3.5)\nRequirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.21.0->tensorflow!=2.16,!=2.17,>=2.14->sionna) (3.4.2)\nRequirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.21.0->tensorflow!=2.16,!=2.17,>=2.14->sionna) (3.10)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.21.0->tensorflow!=2.16,!=2.17,>=2.14->sionna) (2.4.0)\nRequirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.21.0->tensorflow!=2.16,!=2.17,>=2.14->sionna) (2025.4.26)\nRequirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.11/dist-packages (from tensorboard<2.19,>=2.18->tensorflow!=2.16,!=2.17,>=2.14->sionna) (3.7)\nRequirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /usr/local/lib/python3.11/dist-packages (from tensorboard<2.19,>=2.18->tensorflow!=2.16,!=2.17,>=2.14->sionna) (0.7.2)\nRequirement already satisfied: werkzeug>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from tensorboard<2.19,>=2.18->tensorflow!=2.16,!=2.17,>=2.14->sionna) (3.1.3)\nRequirement already satisfied: intel-openmp<2026,>=2024 in /usr/local/lib/python3.11/dist-packages (from mkl->numpy<2.0,>=1.26->sionna) (2024.2.0)\nRequirement already satisfied: tbb==2022.* in /usr/local/lib/python3.11/dist-packages (from mkl->numpy<2.0,>=1.26->sionna) (2022.1.0)\nRequirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.11/dist-packages (from tbb==2022.*->mkl->numpy<2.0,>=1.26->sionna) (1.3.0)\nRequirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.11/dist-packages (from mkl_umath->numpy<2.0,>=1.26->sionna) (2024.2.0)\nRequirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.11/dist-packages (from intel-openmp<2026,>=2024->mkl->numpy<2.0,>=1.26->sionna) (2024.2.0)\nRequirement already satisfied: traittypes>=0.2.0 in /usr/local/lib/python3.11/dist-packages (from ipydatawidgets>=1.1.1->pythreejs>=2.4.2->sionna-rt==1.1.0->sionna) (0.2.1)\nRequirement already satisfied: jedi>=0.16 in /usr/local/lib/python3.11/dist-packages (from ipython>=6.1.0->ipywidgets>=8.1.5->sionna-rt==1.1.0->sionna) (0.19.2)\nRequirement already satisfied: decorator in /usr/local/lib/python3.11/dist-packages (from ipython>=6.1.0->ipywidgets>=8.1.5->sionna-rt==1.1.0->sionna) (4.4.2)\nRequirement already satisfied: pickleshare in /usr/local/lib/python3.11/dist-packages (from ipython>=6.1.0->ipywidgets>=8.1.5->sionna-rt==1.1.0->sionna) (0.7.5)\nRequirement already satisfied: prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from ipython>=6.1.0->ipywidgets>=8.1.5->sionna-rt==1.1.0->sionna) (3.0.50)\nRequirement already satisfied: pygments in /usr/local/lib/python3.11/dist-packages (from ipython>=6.1.0->ipywidgets>=8.1.5->sionna-rt==1.1.0->sionna) (2.19.1)\nRequirement already satisfied: backcall in /usr/local/lib/python3.11/dist-packages (from ipython>=6.1.0->ipywidgets>=8.1.5->sionna-rt==1.1.0->sionna) (0.2.0)\nRequirement already satisfied: matplotlib-inline in /usr/local/lib/python3.11/dist-packages (from ipython>=6.1.0->ipywidgets>=8.1.5->sionna-rt==1.1.0->sionna) (0.1.7)\nRequirement already satisfied: pexpect>4.3 in /usr/local/lib/python3.11/dist-packages (from ipython>=6.1.0->ipywidgets>=8.1.5->sionna-rt==1.1.0->sionna) (4.9.0)\nRequirement already satisfied: MarkupSafe>=2.1.1 in /usr/local/lib/python3.11/dist-packages (from werkzeug>=1.0.1->tensorboard<2.19,>=2.18->tensorflow!=2.16,!=2.17,>=2.14->sionna) (3.0.2)\nRequirement already satisfied: markdown-it-py>=2.2.0 in /usr/local/lib/python3.11/dist-packages (from rich->keras>=3.5.0->tensorflow!=2.16,!=2.17,>=2.14->sionna) (3.0.0)\nRequirement already satisfied: parso<0.9.0,>=0.8.4 in /usr/local/lib/python3.11/dist-packages (from jedi>=0.16->ipython>=6.1.0->ipywidgets>=8.1.5->sionna-rt==1.1.0->sionna) (0.8.4)\nRequirement already satisfied: mdurl~=0.1 in /usr/local/lib/python3.11/dist-packages (from markdown-it-py>=2.2.0->rich->keras>=3.5.0->tensorflow!=2.16,!=2.17,>=2.14->sionna) (0.1.2)\nRequirement already satisfied: ptyprocess>=0.5 in /usr/local/lib/python3.11/dist-packages (from pexpect>4.3->ipython>=6.1.0->ipywidgets>=8.1.5->sionna-rt==1.1.0->sionna) (0.7.0)\nRequirement already satisfied: wcwidth in /usr/local/lib/python3.11/dist-packages (from prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0->ipython>=6.1.0->ipywidgets>=8.1.5->sionna-rt==1.1.0->sionna) (0.2.13)\n","output_type":"stream"}],"execution_count":4},{"cell_type":"code","source":"# Sionna components\nimport numpy as np\nimport sionna.sys\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nfrom sionna.phy import config, Block\nfrom sionna.phy.constants import BOLTZMANN_CONSTANT\nfrom sionna.sys import PFSchedulerSUMIMO\n\nclass AR1(Block):\n    \"\"\" Autoregressive process of order 1 for the achievable rate evolution \"\"\"\n    def __init__(self, mean, rho, precision=None):\n        super().__init__(precision=precision)\n        self.mean = tf.cast(mean, self.rdtype)\n        self.rho = tf.cast(rho, self.rdtype)\n        self.val = tf.Variable(mean, dtype=self.rdtype)\n\n    def call(self):\n        val_new = self.val * self.rho + self.mean * (1 - self.rho) + \\\n            config.tf_rng.normal(self.val.shape, dtype=self.rdtype, stddev=1)\n        val_new = tf.maximum(tf.cast(0, self.rdtype), val_new)\n        self.val.assign(val_new)\n        return self.val\n        \n# Set random seed for reproducibility\nsionna.phy.config.seed = 48\n\n# Internal computational precision\nsionna.phy.config.precision = 'single'  # 'single' or 'double'\n\n# Number users\nnum_ut = 4\n\n# OFDM resource grid\nnum_subcarriers = 273\nnum_ofdm_symbols = 2\nnum_slots = 300\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-08T13:41:43.615031Z","iopub.execute_input":"2025-08-08T13:41:43.615457Z","iopub.status.idle":"2025-08-08T13:42:04.326936Z","shell.execute_reply.started":"2025-08-08T13:41:43.615420Z","shell.execute_reply":"2025-08-08T13:42:04.325776Z"}},"outputs":[{"name":"stderr","text":"2025-08-08 13:41:45.734371: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\nWARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nE0000 00:00:1754660506.038149      35 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\nE0000 00:00:1754660506.126581      35 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n2025-08-08 13:42:04.264527: E external/local_xla/xla/stream_executor/cuda/cuda_driver.cc:152] failed call to cuInit: INTERNAL: CUDA error: Failed call to cuInit: UNKNOWN ERROR (303)\n","output_type":"stream"}],"execution_count":5},{"cell_type":"markdown","source":"## Generate data set","metadata":{}},{"cell_type":"code","source":"channel_state_len=20\nse_achievable_hist = np.zeros([num_slots*num_ofdm_symbols,\n                               num_subcarriers,\n                               num_ut])\nno_channel_change = int(num_slots*num_ofdm_symbols/channel_state_len)\nfor n in range(no_channel_change):\n    # User-specific average achievable rate\n    se_achievable_avg = config.tf_rng.uniform([num_ut], minval=1, maxval=7)\n    \n    # User-specific AR multiplicative parameter\n    rho = config.tf_rng.uniform([num_ut], minval=0.8, maxval=.95)\n      \n    # Broadcast across resources\n    se_achievable_avg_expand = tf.tile(se_achievable_avg[tf.newaxis, :],\n                                [num_subcarriers, 1])\n    rho = tf.tile(rho[tf.newaxis, :],\n                  [num_subcarriers, 1])\n    \n    # Create the AR(1) process\n    se_achievable_ar = AR1(se_achievable_avg_expand, rho)\n    \n    # Generate the achievable rate time series\n    offset = channel_state_len*n\n    for symbol in range(channel_state_len):\n        se_achievable_hist[symbol+offset, :] = se_achievable_ar().numpy()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-08T13:43:28.461804Z","iopub.execute_input":"2025-08-08T13:43:28.462536Z","iopub.status.idle":"2025-08-08T13:43:30.595177Z","shell.execute_reply.started":"2025-08-08T13:43:28.462506Z","shell.execute_reply":"2025-08-08T13:43:30.594287Z"}},"outputs":[],"execution_count":6},{"cell_type":"code","source":"# Create a color map or list of colors\ncolors = plt.cm.Set1(np.linspace(0, 1, num_ut))\n\n# Plot\nfig, ax = plt.subplots(figsize=(10, 5))\nax.set_xlabel('OFDM symbol index')\nax.set_ylabel('Spectral efficiency [bps/Hz]')\nax.set_title('Achievable spectral efficiency evolution (avg across resources)')\nfor ut in range(num_ut):\n    # Average SE across subcarriers\n    ax.plot(se_achievable_hist[..., ut].mean(axis=(-1)), color=colors[ut], label=f'User {ut+1}')\nax.legend()\nax.grid()\nfig.tight_layout()\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-08T13:43:42.611449Z","iopub.execute_input":"2025-08-08T13:43:42.611878Z","iopub.status.idle":"2025-08-08T13:43:43.075492Z","shell.execute_reply.started":"2025-08-08T13:43:42.611843Z","shell.execute_reply":"2025-08-08T13:43:43.074437Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x500 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":7},{"cell_type":"markdown","source":"## Callback Implementation","metadata":{}},{"cell_type":"code","source":"from stable_baselines3.common.callbacks import BaseCallback\nimport matplotlib.pyplot as plt\nimport torch\n\nclass RewardLossTracker(BaseCallback):\n    def __init__(self, verbose=1, qval_log_interval=1000):\n        super().__init__(verbose)\n        self.episode_rewards = []\n        self.losses = []\n        self.q_values = []\n        self.current_reward = 0\n        self.episode_count = 0\n        self.qval_log_interval = qval_log_interval\n\n    def _on_step(self) -> bool:\n        self.current_reward += self.locals[\"rewards\"][0]\n\n        # Track reward\n        if self.locals[\"dones\"][0]:\n            self.episode_rewards.append(self.current_reward)\n            self.current_reward = 0\n            self.episode_count += 1\n            # print(f\"[Episode {self.episode_count}] Reward: {self.episode_rewards[-1]:.2f}\")\n            if self.verbose and self.episode_count % 10 == 0:\n                print(f\"[Episode {self.episode_count}] Reward: {self.episode_rewards[-1]:.2f}\")\n\n        # Track loss (only works for off-policy algos like DQN)\n        if hasattr(self.model, \"logger\"):\n            log_values = self.model.logger.name_to_value\n            if \"train/loss\" in log_values:\n                loss = log_values[\"train/loss\"]\n                self.losses.append(loss)\n    \n        return True\n\n    def _on_training_end(self) -> None:\n        self._plot()\n\n    def _plot(self):\n        fig, axs = plt.subplots(1, 2, figsize=(12,4))\n        axs[0].plot(self.episode_rewards)\n        axs[0].set_title(\"Episode Rewards\")\n        axs[1].plot(self.losses)\n        axs[1].set_title(\"Losses\")\n        plt.tight_layout()\n        plt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-08T13:43:55.420346Z","iopub.execute_input":"2025-08-08T13:43:55.420883Z","iopub.status.idle":"2025-08-08T13:44:01.843809Z","shell.execute_reply.started":"2025-08-08T13:43:55.420853Z","shell.execute_reply":"2025-08-08T13:44:01.842759Z"}},"outputs":[],"execution_count":8},{"cell_type":"markdown","source":"# Environment ","metadata":{}},{"cell_type":"code","source":"import gym\nimport numpy as np\nfrom gym import spaces\n\nclass LEASCHEngine(gym.Env):\n    def __init__(self, achievable_data_rate=[], episode_len=0, num_ues=0, deploy_mode=False):\n        super().__init__()\n        self.num_ues = num_ues\n        self.action_space = spaces.Discrete(num_ues)\n        self.observation_space = spaces.Box(low=0.0, high=1.0, shape=(2 * num_ues,), dtype=np.float32)\n        \n        self.episode_len = episode_len\n        self.episode_count = 0\n        self.deploy_mode = deploy_mode\n        self.scheduled_cnt = np.zeros(num_ues)\n\n        \n        if not self.deploy_mode:\n            assert achievable_data_rate is not None, \"Training mode requires achievable_data_rate\"\n            # Achievable data rates for each UE each RBG each symbol are generated from an autoaggressive model\n            self.achievable_d = achievable_data_rate/np.max(achievable_data_rate)\n            self.reset()\n            \n    def set_external_inputs(self, g_external, d_external):\n        \"\"\"\n        Use this in deployment mode to set g and d before calling `step()`.\n        \"\"\"\n        assert self.deploy_mode, \"External inputs only allowed in deployment mode\"\n        assert len(g_external) == self.num_ues\n        assert len(d_external) == self.num_ues\n        self.g_n = np.array(g_external)\n        self.d_n = np.array(d_external)\n\n    def reset(self):\n        if not self.deploy_mode:\n            if self.episode_count >= self.achievable_d.shape[0]:\n                self.episode_count = 0  # Wrap only for validation\n        \n        self.time = 0\n        self.scheduled_cnt = np.zeros(self.num_ues)\n        self.f = np.zeros(self.num_ues)\n        \n        # Set g and d before call reset() in deployment mode\n        if not self.deploy_mode:\n            while(1):\n                self.g = np.random.randint(0, 2, self.num_ues)\n                if np.sum(self.g)>0:\n                    break\n            self.d = np.random.randint(1,15,self.num_ues)/14 # No of symbols x No of RBG x No of UE\n        else:\n            self.d = self.d_n\n            self.g = self.g_n\n            \n        self.state = np.concatenate([self.d * self.g, self.f/(self.episode_len)])\n        \n        return self.state.astype(np.float32)\n\n    def step(self, action):\n        eligible = self.g[action]\n        self.scheduled_cnt[action]+=1\n\n        # Calcuate reward for current action\n        if eligible == 0:\n            reward = -1.0                                    \n        else:\n            max_f = np.max(self.f)\n            min_f = np.min(self.f)\n            reward = self.d[action] * (min_f/(max_f+1e-6))\n            # alpha = 0.5\n            # throughput = self.d[action]\n            # fairness = self.f[action] / (np.max(self.f) + 1e-6)\n            # reward = alpha * throughput + (1 - alpha) * fairness\n           \n        # Update fairness metric\n        for u in range(self.num_ues):\n            if u == action:\n                self.f[u] = max(self.f[u] - 1, 0)\n            else:\n                self.f[u] += 1\n\n        # Determine the next state according to the current action\n        self.time += 1\n        if self.time >= self.episode_len:\n            done = True\n            self.episode_count +=1\n            next_state = np.zeros_like(self.state)\n            # jfi = (self.scheduled_cnt.sum())**2/(self.num_ues*np.sum(self.scheduled_cnt**2))\n            # print(\"JFI = \",jfi)\n        else:\n            done = False\n            if not self.deploy_mode:\n                assert self.episode_count < self.achievable_d.shape[0]\n                self.d = self.achievable_d[self.episode_count, self.time-1, :]\n                while(1):\n                    self.g = np.random.randint(0, 2, self.num_ues)\n                    if np.sum(self.g)>0:\n                        break\n            else:\n                self.d = self.d_n\n                self.g = self.g_n\n            next_state = np.concatenate([self.d * self.g, self.f/(self.episode_len)])\n    \n        return next_state.astype(np.float32), reward, done, {}","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-08T13:44:40.231470Z","iopub.execute_input":"2025-08-08T13:44:40.231894Z","iopub.status.idle":"2025-08-08T13:44:40.251186Z","shell.execute_reply.started":"2025-08-08T13:44:40.231855Z","shell.execute_reply":"2025-08-08T13:44:40.250124Z"}},"outputs":[],"execution_count":9},{"cell_type":"code","source":"l_episode = num_subcarriers\n# Prevent all-zeros state\nse_achievable_hist = se_achievable_hist+0.1","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-08T13:45:21.952957Z","iopub.execute_input":"2025-08-08T13:45:21.953347Z","iopub.status.idle":"2025-08-08T13:45:21.972273Z","shell.execute_reply.started":"2025-08-08T13:45:21.953321Z","shell.execute_reply":"2025-08-08T13:45:21.971324Z"}},"outputs":[],"execution_count":10},{"cell_type":"code","source":"total_episodes = num_slots*num_ofdm_symbols\nnum_episodes = 400\nvalid_episodes = 200\ntrain_data_rate = se_achievable_hist[0:num_episodes,:,:]\nvalid_data_rate = se_achievable_hist[num_episodes:,:,:]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-08T13:45:39.395666Z","iopub.execute_input":"2025-08-08T13:45:39.396031Z","iopub.status.idle":"2025-08-08T13:45:39.401466Z","shell.execute_reply.started":"2025-08-08T13:45:39.396006Z","shell.execute_reply":"2025-08-08T13:45:39.400344Z"}},"outputs":[],"execution_count":11},{"cell_type":"code","source":"from stable_baselines3.common.callbacks import EvalCallback\nfrom stable_baselines3.common.vec_env import DummyVecEnv\n\neval_env = DummyVecEnv([lambda: LEASCHEngine(\n    achievable_data_rate=valid_data_rate,\n    episode_len=l_episode,\n    num_ues=num_ut\n)])\n\neval_callback = EvalCallback(\n    eval_env,\n    best_model_save_path=\"./logs/best_model\",\n    log_path=\"./logs/results\",\n    eval_freq=2000,                    # Evaluate every 5000 steps\n    deterministic=True,\n    render=False\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-20T02:48:16.572957Z","iopub.execute_input":"2025-06-20T02:48:16.573333Z","iopub.status.idle":"2025-06-20T02:48:16.582408Z","shell.execute_reply.started":"2025-06-20T02:48:16.573310Z","shell.execute_reply":"2025-06-20T02:48:16.581393Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/stable_baselines3/common/vec_env/patch_gym.py:49: UserWarning: You provided an OpenAI Gym environment. We strongly recommend transitioning to Gymnasium environments. Stable-Baselines3 is automatically wrapping your environments in a compatibility layer, which could potentially cause issues.\n  warnings.warn(\n","output_type":"stream"}],"execution_count":14},{"cell_type":"markdown","source":"# Setup DQN Model and Training","metadata":{}},{"cell_type":"code","source":"from stable_baselines3 import DQN\nfrom stable_baselines3.common.vec_env import DummyVecEnv\n\nenv = DummyVecEnv([lambda: LEASCHEngine(achievable_data_rate=train_data_rate, episode_len = l_episode, num_ues=num_ut)])\n\nmodel = DQN(\n    \"MlpPolicy\",\n    env,\n    device = 'auto',\n    policy_kwargs=dict(net_arch=[128, 128]),\n    learning_rate=1e-4,\n    buffer_size=int(1e6),\n    batch_size=64,\n    learning_starts=1000,\n    target_update_interval=50,\n    tau=2e-3,\n    gamma=0.99,\n    train_freq=4,\n    gradient_steps=2,\n    exploration_initial_eps=0.99,\n    exploration_final_eps=0.05,\n    exploration_fraction=0.8,\n    verbose=0,\n)\n\n# callback = LossTrackingCallback()\ncallback = RewardLossTracker()\nmodel.learn(total_timesteps=l_episode*num_episodes,callback=callback)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-08T13:52:42.643114Z","iopub.execute_input":"2025-08-08T13:52:42.644805Z","iopub.status.idle":"2025-08-08T13:56:33.659977Z","shell.execute_reply.started":"2025-08-08T13:52:42.644760Z","shell.execute_reply":"2025-08-08T13:56:33.658825Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/stable_baselines3/common/vec_env/patch_gym.py:49: UserWarning: You provided an OpenAI Gym environment. We strongly recommend transitioning to Gymnasium environments. Stable-Baselines3 is automatically wrapping your environments in a compatibility layer, which could potentially cause issues.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"[Episode 10] Reward: -97.21\n[Episode 20] Reward: -94.35\n[Episode 30] Reward: -102.53\n[Episode 40] Reward: -95.48\n[Episode 50] Reward: -91.42\n[Episode 60] Reward: -85.62\n[Episode 70] Reward: -68.56\n[Episode 80] Reward: -71.67\n[Episode 90] Reward: -57.79\n[Episode 100] Reward: -60.52\n[Episode 110] Reward: -58.88\n[Episode 120] Reward: -60.26\n[Episode 130] Reward: -56.97\n[Episode 140] Reward: -46.61\n[Episode 150] Reward: -39.68\n[Episode 160] Reward: -35.94\n[Episode 170] Reward: -24.20\n[Episode 180] Reward: -29.98\n[Episode 190] Reward: -29.29\n[Episode 200] Reward: -25.82\n[Episode 210] Reward: -21.08\n[Episode 220] Reward: -10.35\n[Episode 230] Reward: 1.52\n[Episode 240] Reward: -3.30\n[Episode 250] Reward: 1.68\n[Episode 260] Reward: 1.37\n[Episode 270] Reward: -4.80\n[Episode 280] Reward: 6.78\n[Episode 290] Reward: 4.65\n[Episode 300] Reward: 20.56\n[Episode 310] Reward: 18.79\n[Episode 320] Reward: 30.84\n[Episode 330] Reward: 25.83\n[Episode 340] Reward: 31.22\n[Episode 350] Reward: 19.80\n[Episode 360] Reward: 10.81\n[Episode 370] Reward: 15.77\n[Episode 380] Reward: 16.03\n[Episode 390] Reward: 26.05\n[Episode 400] Reward: 33.85\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x400 with 2 Axes>","image/png":"iVBORw0KGgoAAAANSUhEUgAABKUAAAGGCAYAAACqvTJ0AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8pXeV/AAAACXBIWXMAAA9hAAAPYQGoP6dpAADdTUlEQVR4nOzdd5wU9fkH8M/2cnd7vVAOjioiVZATKbYTMDbUGEsigoiJgfxiUKPYMBrFgqgxRI3GEktETdTEgiACooJI773D9bZ3u7d9fn/szuzM7uzdHhy3Vz7v12tf3s7OzM6ecOx+7nmer0YQBAFEREREREREREStSJvoCyAiIiIiIiIios6HoRQREREREREREbU6hlJERERERERERNTqGEoREREREREREVGrYyhFREREREREREStjqEUERERERERERG1OoZSRERERERERETU6hhKERERERERERFRq2MoRURERERERERErY6hFBG1mEceeQQajaZVn/PQoUPQaDR48803W/V527upU6eioKAg0ZdBRERERESdGEMpok7qzTffhEajiXlbs2ZNoi8xYSK/FzabDeeffz4+//zzRF8aERERUUzi+7t169Yl+lKIiOKiT/QFEFFiPfroo+jVq1fU9r59+zb7XA8++CDuu+++lrishLvkkkswZcoUCIKAw4cP46WXXsIVV1yBL7/8EhMnTkz05REREREREbV7DKWIOrlLL70UI0eObJFz6fV66PUd48dK//798atf/Uq6f+2112LgwIF44YUX2kUo5XK5YDQaodWyIJaIiIiIiNomflohokaJM5vmz5+P5557Dj179oTFYsH555+Pbdu2KfZVmym1dOlSjB07FmlpaUhOTsYZZ5yB+++/X7FPWVkZpk+fjtzcXJjNZgwdOhRvvfVW1LXU1NRg6tSpSE1NRVpaGm655RbU1NSoXveuXbvw85//HBkZGTCbzRg5ciT++9//nvT34cwzz0RWVhb279+v2O52uzF37lz07dsXJpMJ+fn5+OMf/wi32y3tc8011+Dss89WHHfFFVdAo9EorunHH3+ERqPBl19+CQCoqqrC3XffjcGDByM5ORk2mw2XXnopNm/erDjXihUroNFo8P777+PBBx9Et27dYLVaYbfbAQCffPIJBg0aBLPZjEGDBuHjjz9WfY3vv/8+RowYgZSUFNhsNgwe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vHgxFi1ahIsuughLliyBTqdr8ecUA6+777475ip5ffv2bfI83bt3R1FREQDgZz/7GbKysjBr1ixceOGFuOaaa6TnGjx4MBYsWKB6jvz8fOnrsWPH4vHHH4fL5cKqVavwwAMPIC0tDYMGDcKqVaukuVzyUOqJJ57AQw89hFtvvRWPPfYYMjIyoNVqceedd6pWnsmrpJorJycHmzZtwldffYUvv/wSX375Jd544w1MmTJFdeg8ERERdVzjx4/H/v378emnn2LJkiV47bXX8Nxzz+Hll1/GbbfdBgC48847ccUVV+CTTz7BV199hYceegjz5s3DN998g+HDh0vvVd5++23k5eVFPYd8xeamzkVEHRdDKSKKi1r59p49e5ocPqnVanHxxRfj4osvxoIFC/DEE0/ggQcewPLly1FUVISePXtiy5YtCAQCiiqkXbt2AQB69uwp/XfZsmWor69XVEvt3r1b8XxiObrBYJBCpZbw61//Gs899xwefPBBXH311dBoNOjTpw82b96Miy++OGrVwUjjxo2Dx+PBv/71Lxw/flwKn8aPHy+FUv3791cMjf/oo49w4YUX4h//+IfiXDU1NcjKymrymsXvndr/u8jvGwAYjUZcccUVuOKKKxAIBPDb3/4Wr7zyCh566KG4gjwiIiJqu7Kzs2G1WlXfA+zatQtarVbxC7WMjAxMmzYN06ZNQ319PcaPH49HHnlECqUAoE+fPrjrrrtw1113Ye/evRg2bBieffZZvPPOO9LiMDk5OXG9J2vsXETUcbF9j4ji8sknnyhmMa1duxY//vgjLr300pjHVFVVRW0bNmwYAMDtdgMIViGVlJRg0aJF0j4+nw8vvvgikpOTcf7550v7+Xw+vPTSS9J+fr8fL774ouL8OTk5uOCCC/DKK6+guLg46vnLy8vjeLXR9Ho97rrrLuzcuROffvopAOAXv/gFjh8/jldffTVq/4aGBjgcDul+YWEhDAYDnnrqKWRkZOCss84CEAyr1qxZg5UrVyqqpIBg258gCIptH374YVwzsYDgjIhhw4bhrbfeUrT7LV26FDt27FDsW1lZqbiv1WoxZMgQAOH/V0RERNR+6XQ6TJgwAZ9++qli/EJpaSnee+89jB07FjabDUD0+4Lk5GT07dtXek/gdDrhcrkU+/Tp0wcpKSnSPhMnToTNZsMTTzwBr9cbdT3ie7J4zkVEHRcrpYg6uS+//FKqSpI777zzFEMw+/bti7Fjx+KOO+6A2+3G888/j8zMTPzxj3+Mee5HH30U3377LS677DL07NkTZWVl+Nvf/obu3btj7NixAIDbb78dr7zyCqZOnYr169ejoKAAH330Eb7//ns8//zzSElJAQBcccUVGDNmDO677z4cOnQIAwcOxH/+8x/V2UoLFy7E2LFjMXjwYMyYMQO9e/dGaWkpVq9ejWPHjmHz5s0n9b2aOnUqHn74YTz11FOYPHkybr75ZnzwwQf4zW9+g+XLl2PMmDHw+/3YtWsXPvjgA3z11VcYOXIkAMBqtWLEiBFYs2YNrrjiCqmyavz48XA4HHA4HFGh1OWXX45HH30U06ZNw3nnnYetW7fi3XffVfx/acq8efNw2WWXYezYsbj11ltRVVWFF198EWeddRbq6+ul/W677TZUVVXhoosuQvfu3XH48GG8+OKLGDZsmDTfi4iIiNqH119/XXU25COPPIKlS5di7Nix+O1vfwu9Xo9XXnkFbrcbTz/9tLTfwIEDccEFF2DEiBHIyMjAunXr8NFHH2HWrFkAgtXyF198MX7xi19g4MCB0Ov1+Pjjj1FaWoobbrgBAGCz2fDSSy/h5ptvxtlnn40bbrgB2dnZOHLkCD7//HOMGTMGf/3rX+M6FxF1YAle/Y+IEkRcMjjW7Y033hAEQRAOHjwoLdP77LPPCvn5+YLJZBLGjRsnbN68WXHOuXPnCvIfK8uWLROuuuoqoWvXroLRaBS6du0q3HjjjcKePXsUx5WWlgrTpk0TsrKyBKPRKAwePFh6frnKykrh5ptvFmw2m5CamircfPPNwsaNGxXXK9q/f78wZcoUIS8vTzAYDEK3bt2Eyy+/XPjoo4+a/N4AEGbOnKn62COPPCIAEJYvXy4IgiB4PB7hqaeeEs466yzBZDIJ6enpwogRI4Q//elPQm1treLYe+65RwAgPPXUU4rtffv2FQAolmcWBEFwuVzCXXfdJXTp0kWwWCzCmDFjhNWrVwvnn3++cP7550v7LV++XAAgfPjhh6rX/O9//1s488wzBZPJJAwcOFD4z3/+I9xyyy1Cz549pX0++ugjYcKECUJOTo5gNBqFHj16CL/+9a+F4uLiJr9fRERE1DY09f7u6NGjwoYNG4SJEycKycnJgtVqFS688ELhhx9+UJznz3/+szBq1CghLS1NsFgswoABA4THH39c8Hg8giAIQkVFhTBz5kxhwIABQlJSkpCamioUFhYKH3zwQdQ1LV++XJg4caKQmpoqmM1moU+fPsLUqVOFdevWNftcRNTxaAQhojeEiEjm0KFD6NWrF5555hncfffdib4cIiIiIiIi6iA4U4qIiIiIiIiIiFodQykiIiIiIiIiImp1DKWIiIiIiIiIiKjVcaYUERERERERERG1OlZKERERERERERFRq2MoRURERERERERErU6f6AtoDYFAACdOnEBKSgo0Gk2iL4eIiIjaKUEQUFdXh65du0Kr7Xi/2+N7JiIiImoJ8b5n6hSh1IkTJ5Cfn5/oyyAiIqIO4ujRo+jevXuiL6PF8T0TERERtaSm3jN1ilAqJSUFQPCbYbPZEnw1RERE1F7Z7Xbk5+dL7y06Gr5nIiIiopYQ73umThFKieXnNpuNb7CIiIjolHXU1ja+ZyIiIqKW1NR7po43DIGIiIiIiIiIiNo8hlJERERERERERNTqGEoREREREREREVGrYyhFREREREREREStjqEUERERERERERG1OoZSRERERERERETU6hhKERERERERERFRq2MoRURERERERERErY6hFBERERERERERtTqGUkRERERERERE1OoYShERERERERERUatjKEVERNQMG49U47x5y/DZlhOJvhRq5xYuXIiCggKYzWYUFhZi7dq1Mfd99dVXMW7cOKSnpyM9PR1FRUVR+0+dOhUajUZxmzRp0ul+GXHz+gO44sXvcN+/tyT6UoiIiKiNYChFRETUDN/vq8CJWhe+2VmW6EuhdmzRokWYPXs25s6diw0bNmDo0KGYOHEiysrU/1ytWLECN954I5YvX47Vq1cjPz8fEyZMwPHjxxX7TZo0CcXFxdLtX//6V2u8nLis2luOrcdr8f5PRxN9KURERNRGMJQiIiJqBo8vAABw+fwJvhJqzxYsWIAZM2Zg2rRpGDhwIF5++WVYrVa8/vrrqvu/++67+O1vf4thw4ZhwIABeO211xAIBLBs2TLFfiaTCXl5edItPT29NV5OXAKBRF8BERERtTUMpYiIiJrB7Q+FUl5+wqaT4/F4sH79ehQVFUnbtFotioqKsHr16rjO4XQ64fV6kZGRodi+YsUK5OTk4IwzzsAdd9yBysrKFr12IiIiopakT/QF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PJ26pJoV91kpRRS/66+/HuXl5Xj44YdRUlKCYcOGYfHixdLw8yNHjkCrDf+dOnHiBIYPHy7dnz9/PubPn4/zzz8fK1asAAAcO3YMN954IyorK5GdnY2xY8dizZo1yM7ObtXXRkRERBSvhH2COHToEKZPn45evXrBYrGgT58+mDt3LjweZRn3li1bMG7cOJjNZuTn5+Ppp59O0BUT0anQJbp9L1QVpVx9TxniiFVSBp1G0W4nD6VMei26ySqEItvkspPDoVRaK4dSY/pkAlBfCfB0yLUxlCI6FbNmzcLhw4fhdrvx448/orCwUHpsxYoVePPNN6X7BQUFEAQh6iYGUgDw/vvv48SJE3C73Th27Bjef/999OnTpxVfEREREVHzJKxSateuXQgEAnjllVfQt29fbNu2DTNmzIDD4cD8+fMBBFeAmTBhAoqKivDyyy9j69atuPXWW5GWlobbb789UZdO1GGU17mh12qQfpqHYgNtoH3PHwyg5JVSnohKKXnrnryySx7yCALQPd2KQ5VOANEzobJjte+1Qij12wv7IivFhAvPyDntzwUEX3uSUQdHqG3QpGf7HhERERERxS9hodSkSZMwadIk6X7v3r2xe/duvPTSS1Io9e6778Lj8eD111+H0WjEWWedhU2bNmHBggUMpYhOkccXwITnVsJs0OH7ey+C9jSkRoIQXlWptQed+wPh+VBAOIByN9K+J+4vH1AOAEnG8I9Kjz+A/IzYlVJmg05ahS/V2rqVUmaDDlNGF5z255HLTDbBUSUGdAlIHomo3fnz5EF48JNtib4MIiIiagPaVK9FbW0tMjIypPurV6/G+PHjYTSGqzgmTpyI3bt3o7q6OhGXSNRh1DR4UO30orjWpboKXUvwyZb6bu3uvTqXF7JMDEerGvD04l04UO6QtsUKpVIjQil5YOf2BtA93Srdj5wpBYTnSrV2pVQiZCaHfz4nYm4YEbU/vzq3Z6IvgYiIiNqINjPofN++fXjxxRelKikAKCkpQa9evRT7iQNAS0pKkJ6ernout9sNt9st3bfb7afhionaN/nKc25f4LRU8shDn9NRidWYatmQcwBYvL0kah+3V32mVGQoJefxB5Anm6WkFkoN6paKgxUOnJGXIm2Ltfpee5fZCq2fRERERETUMbX4p6T77rsPGo2m0duuXcrlf48fP45Jkybhuuuuw4wZM075GubNm4fU1FTplp+ff8rnJOpoGput1FLk523t9j35kPNYIivEap1Nh1Jun18x4DuyfQ8AFvxiKFbPuQgD8mzSto46bykzydT0TkRERERERCpavFLqrrvuwtSpUxvdp3fv3tLXJ06cwIUXXojzzjsPf//73xX75eXlobS0VLFNvJ+Xlxfz/HPmzMHs2bOl+3a7ncEUUQSXrFLqdLXvyVe388ta+VpDTUSllBp5tRgQX6WU2xtAQVa4fU9tjpJBp0WXVItim8UYHUp1hG43efseERERERFRc7R4KJWdnY3s7Oy49j1+/DguvPBCjBgxAm+88Qa0WmXFwejRo/HAAw/A6/XCYAh+SFy6dCnOOOOMmK17AGAymWAy8bf3RI2RB0atUSnlDQVfgiC0yuyh6jgqpeTfAyC+UGpQt1R0T7fiiasHw6TXQq/SvqdGPlNqVEEG7riwD87ITWnkiPbhpsIe+NuK/bhkYG6iL4WIiIiIiNqZhM2UOn78OC644AL07NkT8+fPR3l5ufSYWAV100034U9/+hOmT5+Oe++9F9u2bcMLL7yA5557LlGXTdRhKCqlTlMoJZ8p1eD1Y9Lz3yIz2Yi3by087TOm4qqUinPQOQB8ded4fL2zFNPHBufc3VTYo1nXIw+lTAYtLjwjp1nHt1Xd063Y+sgEWI1tZkQhERERERG1Ewn7FLF06VLs27cP+/btQ/fu3RWPicvIp6amYsmSJZg5cyZGjBiBrKwsPPzww7j99tsTcclEHYp8ppT3NLXvycMuQQB2ldQBAFbtq8D5/eOrqDxZ4kypNKshZkAVGcY1FkqdkZeiGFzeXPJB8qdjqHwipZhjV5YRERERERHFkrDloKZOnQpBEFRvckOGDMGqVavgcrlw7Ngx3HvvvQm6YqKORV4lFFkx1HLP4Vfd/s8fDsV9jsXbivHrt9fFNbhcTlx9T75SXvT1BSAIAtYerEKDxx9X+97JMskGone0UIqIiIiIiOhkdMw1yomoSa2x+l6ssOub3WV45L/bpWtYvK0YX20vUd33N+9swFfbS/GP7w42+Xx2lxe7SuwAgJpQwJSdEnu+nNvnx9+/PYBfvLIaf/58B+ynMZTSajUwG4I/cs0qK/YRERERERF1NhwCQtRJueSDzk/b6nvq5xUE4M0fDmFwt1SckZeC37yzAQCw67FJiioieXAmVjE15mcvrMKx6gb857fnSZVVuY1USpXa3Zj35S4AwLs/HpHCqFTr6WlHMxt0cHkDrJQiIiIiIiICK6WIOq3WGHSudt4BeSm4fEgXAEClw42XV+6XHqtz+RT77i2tl77WxrFi37HqBgDA1ztKpdX3cm3xr8R5Otv3gPCwc7FiioiIiIiIqDPjJyOiTko+76k12/dMBh0yk4wAgF3Fdfhia7H02Hf7yjH9zZ9wsMIBANh+olZ6rLzOHffzmg06abh5Y5VSarqmmpGdHH+Q1RzhUIqVUkRERERERAyliDopRaWUX30g+alSC7tMeq20WttPh6sQkK1t8IdFm7FsVxl+//5GAMCOYrv0WFmdq9HncnrCVVZmg1YKpXJSmg6lfntBH+nr528YDr3u9PxoNDGUIiIiIiIiknCmFFEn5W6VQefRYZfZoIPNEvzRU1yjHjQdrXICALafkIdSjVdKVdaHV+fz+gXUu4MhVTzte78e3wcaDTCoaypG9cpocv+TZQm17Zk46JyIOrm+OcnYV1bf9I5ERETUofGTEVEnJW+ta82ZUvJKKZ+8TEpGpw3+aNpdUidtK7O7IQjq+wNApSMcSp2oCc6W0miArCZa8Qw6DVKtBtwzcQAuHdyl0X1PlcXISikiIgC4aVQPAMCVQ7sm+EqIiIgokRhKEXVS8pXtYq2Sd6rUzms26JBibrxI06DTwOX1S9VOANDg9aPOrRyELn8NVY5wJdXxUChlMxukIAgAtBpgZM90PHH1YGlb93RrnK/m1PXKSlL8l4ios/IFgv8+bDxaneArISIiokRiKEXUSckDHa8/dgXSqWiqUioWnVYjrYSn02qQbAqGWGX2cPC0cPk+DHhoMdYcqASgbN8TK6XSrQZFq1xmsgkf3XEebirsIW3rlmZp7ss6aQ9ffha+nj0eY/pmtdpzEhG1RW9+fwgAcLSqIbEXQkRERAnFUIqok1IMOm+kUsrnD+Df649Jc56aQ32mlLbJSim9ViMNKk+1GJATmgslH3b+zFe7AQD3/2crAGX73vHq4IecVKsRRlkoZdBqop6rNUMpo16LvjkprfZ8RERt1YnaxhevICIios6BoRRRJyUPjOwuL346VAW/yoyn/2w4jrs+3IyLF6xs9nOoV0rpYGsqlNJpUeMMhkxpVgNyQyvoySulRA2hiq8qWSjl8AS3pVsNMMpW0lNbVa9XNlvpiIiIiIiIEoGhFFEnJa+U+sd3B3Hdy6vx2ZYTUfutPxyc9xEZMHn9AWw4Ui2FR2rUZ0ppYYto34scRq7XalAdqpRKi1EpJRJDKXn7nijNYoBGE66O0ssqpX49vjcGdrHhV+f2jHn9REREREREdPo0Xq5ARB2WS6W17lBFdIteri0cGNU2eJFqMWDz0Rr86rUfUef2oejMHLx2yzmqzxGrUipyplTXNDMq6sNVUHqdBrUNYqWUEdmh0KpCJXhq8IiVUtFVVGlWo+K+XhcOpeb87EzMUb1qIiJqTU6PD1Yj35ISERF1RqyUIuqk3N7owKjO5W30mH1l9RAEAQ9/uk1aCW9ncV3s54hRKWU2aBVVS11SzYp9dJrwTKk0S3gFPflw9sjnkM+UEqVHhlJa/sgjImprvtpekuhLICIiogThr6WI2glBEODyBqSA5lSpVUrVh4ImUSAgSOETAOwvq4e9wYvNx2qlbY0FWWqDzk16HTQaDVLMeqlFr0uqJeK4AGpCq++lyuZCNTaQXbV9z6qsyDLoogedExFRYtW5fE3vRERERB0SywaI2ok/f74TQ/+0BNtP1Da9cxzUK6XCHwye+WoXRj7+NXaXhCuh9pXX44N1RwEAk4d1DR7j9iGgMiC9st6NgyrtgKbQanjyFr6uacpKKbcvIFVKpVuNMBmaDqWqVCqlIkMpncrqe0RElFhC9D8hRERE1EkwlCJqJ/7x3UF4/AG8vfpwi5xPrRVOXhX19Y4yVDk8WH2gUtq2r6weZXXB2U0XDsgBEPwwUeeO/i331X/7ATuL7VHbzYZgpVdKaAU+nVaD7BTloHO3169YfU+slHL7A6hzeaOu/WiVUxp4Lhc9U4o/8oiI2gKzIfzzWGAqRURE1GmxfY+oHbDLWuQiW91Oltq8J3krnjijSf5ZYV9ZvTQsPNdmhtmghcsbgD00AF0kCAKOVEVXSQHySqngj59UiwFJEQNuXbJKqVSLAQ53MHCyN3hx4fwVUav1fbrpOABgUDcbth0PB2HpEZVSelZKERG1CX1zkhU/r4mIiKhzYtkAUTuw40T4jbvJ0DJ/bVUrpULte4IgoNoZ3Q53vKYB1Y5wBZMt1IJX26CcK+XxhwOvHhlWjOyZLt0XK6XEY1MtBiSZlKGU2+uXZkqlWY0whoKs4zUNqKj3YFdJnWI+1DtrjgAArh+ZrzhP5KBztu8REbUNOg1/HhMRERFDKaJ2YbsslGrwRIdJzeXzB+BTmQNVHwql7A0++FUe9wcEaTh5utUoVUfZQwFSICBgw5Fq2BvC7XxL/jAeebLV9SJnStlkq+uJXL4AakOhWLrVIIVS8plXXn/4+krsLui1Glw+pKu0LxAcki43IC9F5btBREStTSMLpdi8R0RE1HmxfY+oHZAPN1ebndQcDrcP/9lwTPUxsX2v0uFu8jypFkM4lAod9/XOUtz+9npcObSrtJ9Rp5VmQgGAKWKmVJpK+54/IKBCrMiyGGHUuRTXp+bsHulITzIiyaiDxxeATqtBSqgC68PfjMbnW4pxZ1H/Jl8XERGdfvLCVY6UIiIi6rxYKUXUDuxowUqpZ5fswUOfbld9zOHxh6qholv35J0WFoMOZoMONouyfe9YdQMA4EBFPYDgDCetViPNoQLClVI22Uwpa0SlFBBeaS/VapCOcamsGCga2NUGAFIrYJrFIP0m/pyCDDxy5VlRbYJERJQYvzm/T6IvgYiIiNoAhlJE7YB8aLjzFEOpD9YdbfTxercPlfXRoVRBZpL0dZo1PA8KCIZSDR4/XL7gtYltgIZQhZR81TtxplRh70xYDDqM6ZsZMyzSaoAUk17RkheLFEqFqq7SIlr3iIio7ZC3dderrOBKREREnQNDKaJ2QD6UXG1AeXNkp5gafbzO5VWtlOqZaZW+TgsNEBernZ74YhdG/nkpjobCM/EDhhgmKdr3QtvG9M3C1kcm4PpzeqhWSonPo9Vq4gulugRDKaspeK7IIedERNQ2vb/2SKIvgYiIiBKEoRRRG+fzByCfOR7vTCmvX73VrakF6OrdPlQ6lKGUQadBl1SLdD/NoqyUAoKtf//bXAwgPJBcDJPkq96JlVJAuILKpNeqXpf4PKY4Qqm+OckAWClFRNQeaGU94Tk2cyN7EhERUUfGUIqojXP7lOGS09N0m8PcT7dh2J+W4FCFQ7FdEAQU17oaPbbO5UNVRPteskmPrORw5VF6UnjlPDlxeLl4zWKFlHyIrckQ/WNHo9FEDTsHwqvnxVMpJYZdYtVVGiuliIjaBY8v9rxAIiIi6tgYShG1cZGhVEMjw75Fb60+DIfHj2eX7lFstzf4mpxJVe/yoSqifS/ZrEdmUjjkSbWE2vciQilHxFwQMUwKyFIps169Vc+i0sInVkrJ2//U9AtVSQHKQedERNT27Si2N70TERERdUhtIpRyu90YNmwYNBoNNm3apHhsy5YtGDduHMxmM/Lz8/H0008n5iKJEsTtU4ZIDU1USgVkvX5HZQPSAeBEbUOTz2d3eVHliKyUMiAzOTyLKt0a3b4HAHWRoVQoTPLLrsmgU+8fVBt2Ls6FilUplZVsxBNXD8a7MwqlbeJA9r6yoIqIiNoWs0rVLBEREXU+beIdwR//+Ed07do1arvdbseECRPQs2dPrF+/Hs888wweeeQR/P3vf0/AVRIlhtsbWSkVDKmqHR7UubxR+8vnQZ2oUYZQxaFQ6swuNjx5zWD8a8a5UcfXu31RoVSKSY9MWfte5Op7InmbHgAY9MEAyi97QKNRD6WKzsxBns2MPNlskaba91ItBtxU2AM5KeFj7rigDz6ZOQbXjcxXPYaIiBKvTzZ/cUBERERtIJT68ssvsWTJEsyfPz/qsXfffRcejwevv/46zjrrLNxwww34v//7PyxYsCABV0p0anaV2DH9zZ+w7Xhts46Lat/zBODy+nHO419j2KNLFZVRAFAimxlVVudGqT18/0RN8OtuaWbcMKoHBnWzRT1fnSscSon5UbB9L1wpFV59r/EWObFSKvIa1Txw2UCsnnMRuqaFA6a0UJugSafe8mdSaQU06rUYlp+mGK5ORERtS6xfUBAREVHnktBQqrS0FDNmzMDbb78Nq9Ua9fjq1asxfvx4GI3hCo2JEydi9+7dqK6ubs1LJTpl/9lwHMt2leHjjcebdVzkANgGjw/ldW74AgL8AQElduXg8sgWvY1Hwn9XxEopcSU9tQqkGqcXlaFB511D+yVHVkqJq+81scKdeH5/HKEUEPyQIl+dL62JSql4BqATERERERFR25SwT3SCIGDq1Kn4zW9+g5EjR6ruU1JSgtzcXMU28X5JSUnMc7vdbtjtdsWNKNKe0jpc/8pqrDlQ2SrPVx2qPhLb7+IlzpQSV5Vr8Prh9YeDqgPlyhX2iiNa9rbKKrOKQ5VSXULVSGoDxF//7iAavH6kWw04s0uwkirZrEe61ShVTomVUulNhlLBa443lAIAkyxoaiqUMjGUIiIiIiIiarda/BPdfffdB41G0+ht165dePHFF1FXV4c5c+a09CVg3rx5SE1NlW75+ZwtQ9EWbyvBjwer8EkzK5dOVk1DcP5Tc5e+Ftv3xOqkgADYXeGB4gcq6hX7F9cqK6eOVYdDqvJ6NwAgNzSDSa19whMKvH53UT/k2IIteykmPXRaDbqlBSunuqQGj7ca9Vh0+7k4pyBd9dqNuuiZUk1RVkoFwy+dVqPajsdKKSIiIiIiovYrermrU3TXXXdh6tSpje7Tu3dvfPPNN1i9ejVMJpPisZEjR+KXv/wl3nrrLeTl5aG0tFTxuHg/Ly8v5vnnzJmD2bNnS/ftdjuDKYoiViBFzmw6Ff6AgHq3L2oAOADUhkKp5j6feJ2pViNOhAKnatkgcrFSyuML4P6Pt+Kj9ccAAMPy07DpaA2Oy0KpulCYZVO5vhE907HlWA28fgG9s5Lwq3N7YsORamw5VoNJg4J/317+1Qgcq25Afka43bawdyZG98nCT4eiW2qb274HRFRKya7TpNfC6fFH7Ks+a4qIiIiIiIjavhYPpbKzs5Gdnd3kfn/5y1/w5z//Wbp/4sQJTJw4EYsWLUJhYXB599GjR+OBBx6A1+uFwRD8cLp06VKcccYZSE9Xr8wAAJPJFBV2EUUSK5aaW7nUmD8s2oTF20rwzd3no3u6ck5arTMUSjW3fS+0+l6ySQeDTgOvX0C1UxZKVQRDqRW7y6RACgDOKUjHpqM1ikqpencwlEoyRYc55/XJxD9uGYl9ZfXonZ0Mo16Lc3tn4rPfjZP2GdQtFYO6pUYdG2tpb7E9MDPJqPq4GrWZUkAw4IoOpVgpRURERERE1F4l7BNdjx49MGjQIOnWv39/AECfPn3QvXt3AMBNN90Eo9GI6dOnY/v27Vi0aBFeeOEFRRUU0ckSw6iWrJTafqIWHn8Ae8vqox6raQgGSR5/855P3N+k10mBTZWiUir4XLtK6hTHnVOQAQAorXNJr7U+VCmVYoqulNJrtUizGjGyIAMZzQiRAMAco2LJEAql7izqj/P7Z+OvNw1v8lzKmVLh61Cbf8VQioiIiIiIqP1q8UqplpSamoolS5Zg5syZGDFiBLKysvDwww/j9ttvT/SlUQcghj3eZoZE8ZzT5YmuhpLa97zNbN8L7W/Ua2E16lDn8qEmVHUFAMdrGuDy+rFNNtAcAAZ3T4VJr4XbF0BxbQN6ZibBEaqUSjZH/9W3WU7+x4G8uklObN9LTzLirVtHNetcWk1wllXkudTOT0RERERERO1PmwmlCgoKIKgMQx4yZAhWrVqVgCuijs59Gtr3xHO5fH4IgiANEnd5/XB5xcqsk1t9z6TXwhIKbOTte4IAzPnPVvx4sAoAUNgrA2f3TEeXVAu6pVtwoNyB49UNyE+3ot4T3b5376QBWLG7DDec0+NkXjKARtr3TiI0EqufUi0GaGXDzdXOxUopIiIiIiKi9ouf6KjTkmZKtWSlVOicm4/W4pzHv8ab3x8EANgbwpVN8ucrq3Ph443HooIqu8uLz7cUw+X1S+GZSa+FxRjMkeWhFAB8vPG4VIn16i0jce+kAQAgzbU6Vt0Ap9cPMfeVt+/dcUEfLPr1aFiMJz80PGallErLXVNMoXPJW/dinYuVUkTUni1cuBAFBQUwm80oLCzE2rVrY+67fft2XHvttSgoKIBGo8Hzzz9/yuckIiIiSjR+oqNO63QMOhfP9e2eclTUe/DV9uBqkTWyUErevvfsV3vwh0Wb8cXWYsV57nhnPWa+twFPLd4lC6V0sIQqkqodwfNdPqQL3px2juJYmzkcOHVPtwAAjlU7pdY9nVYTs7LpZJ2OSin5kHP5duU2rr5HRO3TokWLMHv2bMydOxcbNmzA0KFDMXHiRJSVlanu73Q60bt3bzz55JMxVyBu7jmJiIiIEo2hFHVaYsVSvKGUWntpJK8/uE9VqJKpvN4NAIoZUPLB6sV2V3C/OrfiPN/vqwQA/Hv9MWm1PpNBK1UziZVSZoMOF5yRg6IzcwEAVw/vpjhPt7RQKFXTgLrQkPMko05qK2wpsQadn0ylVFJojlR6ZKUUZ0oRUQeyYMECzJgxA9OmTcPAgQPx8ssvw2q14vXXX1fd/5xzzsEzzzyDG264IeYKw809JxEREVGi8RMddVpiGBXPoPOvd5Ri+GNL8c2u0pj7CIIgBV1iCFURCqVq5e17slBKrF5q8KhfQ6rVALdf1r5nCAY24up7YoXSX28ajsevHiS17Yl6ZyUBAH48UCVdQ4o5euW9U2WK0b5nOInQqOjMXFw+pAtuG9tLsZ0zpYioo/B4PFi/fj2KioqkbVqtFkVFRVi9enWrntPtdsNutytuRERERK2Fn+io0xLDKHcclVK3/XMdapxe3Prmupj7qM2mqnF64fEFUCObASWfHyWGUk6vT/WcNrNBavcz6XVSpZQYeokVSmaDDr8s7Im8VLPi+AsH5CDVYsDxmgZ8viXYIphsavn1DWK2751EpVR2igl/velsnNc3S7FdrVWPlVJE1B5VVFTA7/cjNzdXsT03NxclJSWtes558+YhNTVVuuXn55/U8xMRERGdDH6io06rpQedx2oDrHS4FZVS8hCsPhRKuTzhoEreJmgzG6T9jXotrKGKJPGaYw0YF5kNOvxiZHcAwOuhoevylfdaSsxB5y0YGqkFXJwpRUR0aubMmYPa2lrpdvTo0URfEhEREXUiDKWo03Kf4qDzlXvKMe2NtSipdTV6noo6T8z2PTGUavCGQ6k6d7hqKsWslyqrgqvvKUOYeAaW/2Kk8rfeyaehfa9VQinOlCKiDiIrKws6nQ6lpcqW8NLS0phDzE/XOU0mE2w2m+JGRERE1Fr4iY46reYOOo90y+trsXx3Oe7/eCuA8JDzSOX1LsWgc19AgC/03NJMKdmKfPKh51qNRrb6njYq/GmqUgoAemYmQT7XPOV0tO/FCIdOpn0vFoZSRNRRGI1GjBgxAsuWLZO2BQIBLFu2DKNHj24z5yQiIiI63Vr+0ylRO9GcQecivTZ61bpDFQ7F+SJFVkoBwUDMLwhSkNUga9+Th1Junx+6QDB4MRl0SDEr/8rGE0oZ9VpkJZuk87bb9j0OOieiDmT27Nm45ZZbMHLkSIwaNQrPP/88HA4Hpk2bBgCYMmUKunXrhnnz5gEIDjLfsWOH9PXx48exadMmJCcno2/fvnGdk4iIiKitYShFnZYYIvkCAgIBAVqVwCmSXhe9jyvUeufx+6MeA4DyejdqIkMpXwABWWGVyxsrlApAHJtk0muRalG23sUTSgFA11SzdN5kUyu277VkpZTKuVgpRUTt1fXXX4/y8nI8/PDDKCkpwbBhw7B48WJpUPmRI0eg1YZ/xp04cQLDhw+X7s+fPx/z58/H+eefjxUrVsR1zrZmeI80bDxSk+jLICIiogRiKEWdlnzAuccfgFnbdMBjUAlGXL7GV/Err3NHVUq5fQFFZZV8plSZLJTy+ALwh9Irk14X9fzxzJQCgC6pFmw+VgsASDa3/F97nVYDg04T1cJoaMHQSF4VJT4XK6WIqD2bNWsWZs2apfqYGDSJCgoKFAthnMw525paWWu71x9Q/TeWiIiIOjb+60+dljwUihUoRVINpcRKqVjte/Vu1Do9im1ubwB1rvBAc3uDF3d9sBkfbzwWVSklnykVVSkV5+pzealm6evk09C+F+taTsdMKb1WA6sxGKwxlCIiar8ykozS17tL6hJ4JURERJQo/ERHnZY8RIp32LnaTKmmQqnyOpX2Pb8fDk84lNpbVo9/bziGF77eGzVTSgyljKfSvpcmD6Vavn0PCM68itSiM6VCAZdJr5U+yKRajI0dQkREbdh1I7tLXx+pcibwSoiIiChR2L5HnVIgIMAnG+oU77BztUop8TQxV9+rc8MeCqX0Wg18AQEubwD1bl/UvlUOD8rrlZVSOq3YvqcWSsXfvic6He17sa6lJSulTIbwwPenrh2CvWV16JuT3GLnJyKixImjM5GIiIg6IIZS1Cl5IkKoxiql5DM8Gqv8iTXo/Gi1UwquspJNKLG74PYF4FAJpercPpTZXdJ9tzcgDVc3GXQtVCl1mtr3WrFSalSvDIzqldFi5yYiotbn8ob/7T1ew0opIiKizojte9QpRc6QigypYu2r1r4nnSNGsCVWUFkMOqSEqpQ8MUIpQQAOV4bfmMvb90x6LWwnWSmVJ6uUEucxtTTVSqmWDKVCM6s4R4qIqGPISjZJXx+scCTwSoiIiChRWClFnVJku15jlVINnnAFlD5GO1ogIKgOS9dowi0JqRaDFNI8/sUOVDu8UfsDypX43IrV97TQaTVIMeulIemmOAed56aE3/jHO9S9udQGnRt0sUO85hK/d/FWhxERUduWLfu36ds9FQm8EiIiIkoUlhxQpxQZQjUW1DhlIVGs5bgdHl/UOTUaIEf2hjvNapCqfLYdt+N4TUOT16lYfS8UxtjM4WqpeAMavU6Lwl4ZyEo2YmTP9LiOaS7xWuRzpFq2UircvkdERO2f/BdE8fybSERERB0PK6WoU4oMkBobdN4gWyVP3C8QUIZTtQ3eqEHnVoMO2SkmlNqDg8tTLQZoNc2rHPIHBEWlFABYjOEgSv51U/4141x4/IHTVmkktu/ZLHpU1HsAACZdyz1X19TgXCz50HYiImq/uqXx5zkREVFnx5ID6hRqG7z49dvr8NmWEwCaN+jcKWvfE4OnyOPtDT54fMpB5xajDtmyeRny9r2mpFsNUdvUKoXMzaga0mo1p7X1Ta2SqyUrpUb0TMe/ZpyLJ64Z3GLnJCKixOmezlCKiIios2OlFHU4Lq8/Knz5ZlcpvtoevPXMSEJkwVK8oZTPH4AgCNGhlMsbtc1i1CmGuKZZDahxqs+RipRrM6M6Yl+TSigVa8ZVIogBXF6qGQdCA2tbcqaURqPB6D6ZLXY+IiJKrOZWDxMREVHH03Y+0RK1gDUHKjHgocV44eu9iu3y0OnuDzfHvfre/K92Y9Z7G6T7DV4/Ln1hFab8Y61iv9oGb1SwZTXoFUNc06xGqZqoKdkppqhAR5zV1JLVRy3ptxf2wbxrBuP6c/IBAFpN2wrNiIiobWEmRURERPzESB3Kw59uAwA89/UexXZ5CLW7tA5Hq5yKx9UqpepcXvx1+T5pPhIAVDu92FVSh01HaxT72lVCqchKqVSLQTEEvDHpVqNiZT2TXgtN6N17vCvutbacFDNuHNUD6VYjgLYbnhERUdugYSpFRETU6fFTI3Uohhihj9urDIzWHqpS3FerlNpVUhf389pdPngiB50bdYpKqVSLASZDfH/lMpKMijY9ecDT1lefE6811v8LIiIiIiIiIoChFHUwMUOpiCHkaw9GhFIqlVI7Ttjjfl7V9j2VmVLxBkrBSqnwvvLh4fG2ACaK2kB2IiIiIiIiokj81EgdSqyWMbF9L8kYDHT2ldUrHj9S5URJrUuxrTmhlL3BC48/cvU9fVSlVOT1GfVa9MpKijpfRpJBET6lWsKhlPga2qruaRbotBp0T7cm+lKIiIiIiIioDWMoRR1KrJlNLm8wMCrsrb5629+/PYBz5y1TVFTtKG5GKOVSmSll0Eor0gFAmkU5J+qNqefgp/uLYDNHL4KZHtG+l2YNh1K/L+qHrGQTZl3YN+7ra005NjOW/mE83po2KtGXQkRERERERG1YwkOpzz//HIWFhbBYLEhPT8fkyZMVjx85cgSXXXYZrFYrcnJycM8998Dn8yXmYqnNi1yxTiRWSg3sYkOyKToEEh2tagAAeP0B7G7GTKkGj1+lfU8Pm0UPa6iyKTNZGTRlp5iQajXAGzGLCgAyItr3xOHhANAl1YKfHrgYd088I+7ra229s5ORKgvSiIiIiIiIiCLF/nTeCv79739jxowZeOKJJ3DRRRfB5/Nh27Zt0uN+vx+XXXYZ8vLy8MMPP6C4uBhTpkyBwWDAE088kcArp9ayr6wer357AKP7ZOJng7s0uaJbU4POLUYduqdbYg4xP1ThQN+cZByudKgOP4/F4fFDG7GKkMWog0ajwTM/H4pSuwtd0yyKSq6MpGDQ5AtEP09GsrKqKjLg4YpFRERERERE1N4lLJTy+Xz4/e9/j2eeeQbTp0+Xtg8cOFD6esmSJdixYwe+/vpr5ObmYtiwYXjsscdw77334pFHHoHRaFQ7NXUg76w5jEXrjmLRuqNYe6gKT1w9uNH9DbLQKhAQoNUGwxuxLc+k1yLXZo4ZSh2scAAIDi5vDqfbJwVOBp0GXr8gDSe/bEgXaT950CWGUjErpQzySilWHREREREREVHHkrD2vQ0bNuD48ePQarUYPnw4unTpgksvvVRRKbV69WoMHjwYubm50raJEyfCbrdj+/btibhsamV2Vzgc2h8xnFyNvBLJJZsP5QpVSpkMOuTaTFHHiQ6EQimnJ3hsb5Uh5GocHr8UOE0f2xs3n9sT15zdLXo/d7j11BwaZO6VBVXn98/GqF4ZyEo2KWdKWRjAEhERERERUceSsEqpAwcOAAAeeeQRLFiwAAUFBXj22WdxwQUXYM+ePcjIyEBJSYkikAIg3S8pKYl5brfbDbfbLd232+MfWE1tizzEcfuabqfTacNtbU6PH1ajPnRsuFIqz2aOefzBinrpWEA5YFxNikmPOrcPTo8PHl/wuc7qasMVQ7uq7i+eV04eSr11a3g4uLx9r6nrICIiIiIiImpvWrxS6r777oNGo2n0tmvXLgRCc3QeeOABXHvttRgxYgTeeOMNaDQafPjhh6d0DfPmzUNqaqp0y8/Pb4mXRgkgD3HEFfQaEwiEW+EaZMeKgZbZoENuamOhlENxrBhqxZKWFAyLHO7woPPG5l6JQ8/lZozrDQC4dFCeYrty9T1WShEREREREVHH0uKVUnfddRemTp3a6D69e/dGcXExAOUMKZPJhN69e+PIkSMAgLy8PKxdu1ZxbGlpqfRYLHPmzMHs2bOl+3a7ncFUO6VWKbXjhB2LtxXjNxf0iQqNvLJQyuEJHysGWia9FkmySilx/pOo1O6Gw+2TwjCLUYe//fJsfLzxOJbuKI26vgyrEUerGoKVUv6mQ6nbx/fG1uO1uHp4uLXv1jG9MLIgAwPyUhT7cqYUERERERERdWQtHkplZ2cjOzu7yf1GjBgBk8mE3bt3Y+zYsQAAr9eLQ4cOoWfPngCA0aNH4/HHH0dZWRlycnIAAEuXLoXNZlOEWZFMJhNMpthzg6j9kFdKuUPB0s/+skp6rH9uCob1SEP/3GCg45O1wjlVKqVMei2yksN/NpJMetQ4lUPND1Y44AwFWlajDj8b3AU/G9wFIx5bikqHR7GvWMHk9PilFf5MMVYAFPd/e3qhYptWq8Gw/LSofdm+R0REnYnHF2hylV0iIiLqWBI2U8pms+E3v/kN5s6di/z8fPTs2RPPPPMMAOC6664DAEyYMAEDBw7EzTffjKeffholJSV48MEHMXPmTIZOnUS9rFLKFTFT6rXvDkpfH3ryMgDKlezU2vdMeh1yZZVSZr0OgDKUKq93y9r3wsGQXqdBJHkFk7hiX0u9odbL5mOlctA5ERF1cHtK6zCoW2qiL4OIiIhaUcJCKQB45plnoNfrcfPNN6OhoQGFhYX45ptvkJ6eDgDQ6XT47LPPcMcdd2D06NFISkrCLbfcgkcffTSRl02tSK1SqjG+QKxKqeDXZoMWmUlG2T7h0Ktrqhknal2oc/ngDD2XxRD+K2JQqYCyWQzQaABBgFRxpbbfyZAPdmelFBERdXQ+WQs+ERERdQ4JDaUMBgPmz5+P+fPnx9ynZ8+e+OKLL1rxqqgtcTRSKaXGJ6uUcipmSoUrpbSyCiS7K7xP7+zkUCjlVa2UUgubzAYdkox61LvjmynVHA2yEK6lgi4iIqK2KroemYiIiDo6ftKlNsvnDyiqhfwBAV6/ejAlrrrnjTVTShx0boj9Rz7HFmwJrXP5pEDLIm/f00a/XTbqtFEr6rVYKOVpujKMiIiIiIiIqL1iKEVtlkMllHHHqJaqC1U8yUv/1Qadmw3BAElc/W5cvyxpH5vZEDqXN7z6nqHxSimjXoskk7Lg0NhCVU3ySi8iIiIiIiKijiah7XtEjRFDGb1WI4VNrhhzpWobvEi1GpSr74Va/wRBUKy+BwDPXjcUcy4dAKNeixv+vgaXDe4iVVnZG3wx2vdUKqX00ZVSphaqlMpLNTe9ExERUQehYf8eERFRp8NQitoscZ5UkkmPBq8fHl8gZihldwWHjMtX3xOHlcurq8TASKvVICe0Ct/iO8cDAF799gCAiEopxep70WGTSa9FklH516il5j/dPeEM2F0+3HBOfoucj4iIqC3TcKoUERFRp8NQitoshzsYDCUZdRAEAR5fIGb73j9XH4JWo1GEVmK1kzKU0kUdK0oxB/86yFffsxrlq+/FqJQyKc9pNsR+jubITDZh4U1nt8i5iIiI2jr5CrpERETUOTCUojbL4QlXSvkCAuwuX8xKqQ/WHYvaJrb/uX3BY7Qa9WBJlCLNlPKhIXRsU6vvGXXKSql0q0FRXUVERETx+d/mYgzvkZ7oyyAiIqJWxEHn1GaJlVJWk15aNS9WpZTq8WKllFecJ6WDppGBFWKllD1W+57a6nsRM6W6p1vjvj4iIqLObvrYXtLXYts+ERERdR4MpTqAsjoXBEFoesd2Rqx0SjLqYA613cWqlFITbt8L/lcMtmKxWeSVUmqDzmPMlJKtvtctzRL39REREXV28lVwBXS89zJERETUOIZS7dyXW4sx6vFleG3VwURfSouTZkrJK6W88VdKiaGWK3SMuZF5UoB6pZTVIJ8ppf7XRVkpxVCKiIgoXvIYKsBMioiIqNNhKNXO7S6tAwDsKqlL8JW0DIfbh0tfWIUnv9ylWilV34zS/shB501VSskHnTd41Vbfi27f8wUERaUUQykiIqKT89H66PmQRERE1LExlGrnPKHAxeWLv62tLdlxwo59ZfXS/Z3FduwstuPTTcelAMpq0ksr2tW54g+lwjOlQu17+iba90KDzuWaat/zBwTOlCIiIiIiIiI6CVx9r50TQ6nmtLW1FbVOL372l1UAgIPzfgaNRiNVNTV4/VILXZJRJwVK9W5v3Oc/Xt2Ao1XOcKVUE+17Jr0WRp0WHn/4e2kxyEOp6Eopf0BQrL7XPYOVUkRERERERETxYKVUO+cNBSjudlgpdbymQfpaDI7EQeZOj19ahSfpJCqluqdb0OD1464PN0vnNDfRvqfRaKQWPnF/rWzFPb02fHyf7CRYjTpcPCBXMZiVg86JiIiIiIiI4sNQqg1yef14eeV+HKpwNLmvWNXT0pVSgYCAQxWO07qqn7wiSbx+MZzy+AJSAJVk1EuVUvGGUgtvOhtaDbD2YBWOVjsBNF0pBUARSlmNykJC+Uyp928fjQ0PXYJUqwHVTq/s+OgWQCIiIiIiIiKKxlCqDfrdvzbiyS934c5Fm5rc1+MLhkbNrZR6bdUBfLwx9kDRl7/djwvmr8Cnm04067zNIQ4iB8LXL38dFfVuAIDVpIOpmZVSvbKTkGoJBkRl9uB5mpopBShDJXnrHgDI8zmTQStVb108IAcA0DsrKa5rIyIiohCuuEdERNSpcaZUG7R0RykAYNPRmib3lSqlfPFXSh2udODPn+8EAEwe1g0aTfSspAPljtB/66MeaynylfRc3uiKLzGUSjbppda7Old8M6UMWi2SzXpUO73SecyG5lZKKfcPyFIpecDVLzcFK++5AFnJpriujYiIiIKSzXwrSkRE1JmxUqqNka9ENyw/rcn9PaHKInFuUjwaZPs2xDhODLmaE3Y1lzxgCldKyUMpD4BgxZLYeqdWKaUWBul1GqSYDIrzxFMpJV+BLzKU8gfCoZQxYiW+nplJSDLxjTUREVFzDI/jvQ4RERF1XAyl2pgvtxZLX0e2j6nx+sX2PWV4dLTKiWv+9j0WbyuOOkY+sLu2Qb3yyO2NDomaw+nx4aBsJtbyXWXYfqJWsY88YJIqpWTte9XOYJiUbA5XSsmrq0Rfzx6Puy7pr9im14aHlouVUqYmBp0DQF6qWfpap1VWkMkyKdXqMiIiImoevY5vRYmIiDozvhNoY3aX1klfe/1NB0KeGBVNy3eXYcORGny4LnpulC8Q3tfeoD6jKVwp1bxZVfVuHwIBAZMXfo8L56/A1mO1KKl14da3fsJv3lmv2Fe1UkrWvid2y6WYDLJKqegQzWLUKVrz9FqNYiW9cKVU0yHfjPG9pa+rHB7FY6dz6DsRERERERFRZ8NQqo1xyCqBPPGEUtLqe8rwSKwoUmvP8/nD4Yo9xowmt9QWGH+lVKndhZF/XooZ/1yHPaXBNsSvtpeg1O6CIIQHjovUK6Win6+xSimNJthKJ6+CElfJE4eWS5VScbTvdUuz4J+3jkJWshHTx/VWPCZv3yMiIqKWd7TKmehLICIiolbEUKqNcbjDIZInjtY5cR9XxL7O0HmcnuhQSl6BZY/VvncSlVL/23wCLm8Ay3aVSdvSrAYpaHP7Aopgp04WMLkbmY2VZApXQtkjZkpZDDpoNBpF4GQItQKkRAxPtVkMiMf4/tn46YEi3HxuT8V2ZlJERESn18cbjyf6EoiIiKgVMZRqY+SVQM1p3/MHBPhk+4vnkYc8giDgRE2DNIcKaKRSSmU1vKauW23Qd4pZH7HKXvh65JVSy3eXYdoba7FfZbW/YPte8I9qZFAnhlVGlVAqOeJ6MpKMcb0WQH1mFNv3iIioJS1cuBAFBQUwm80oLCzE2rVrG93/ww8/xIABA2A2mzF48GB88cUXisenTp0KjUajuE2aNOl0voQWV2J3JfoSiIiIqBUxlGpjHJ7mte/Jgyt565szdB55pdTfVuzHeU9+gxe/2SttizVTyqWyGl4sLy7bi0Fzv8KynaVRj3l8AcVrqm3w4kAoeJLPh3pnzREs312O5bvLFcfrtBqYDVrFzCg5cRi8fF6UXqts3xNlNiOUUuNnKEVERC1k0aJFmD17NubOnYsNGzZg6NChmDhxIsrKylT3/+GHH3DjjTdi+vTp2LhxIyZPnozJkydj27Ztiv0mTZqE4uJi6favf/2rNV5Oi4ls9SciIqKOjaFUGyOfKeX1NR2CyIMreRWSQ6V975mvdgMAVu2tkLbFbN8LVUiptdNFenbpHgDA1zuj30i7vAFFS+I9H23GRc+uxNqDVYpKqViSjNHteXLiLKl42vcyk08tlGL7HhERtZQFCxZgxowZmDZtGgYOHIiXX34ZVqsVr7/+uur+L7zwAiZNmoR77rkHZ555Jh577DGcffbZ+Otf/6rYz2QyIS8vT7qlp6e3xstpQfzHloiIqDNhKNXGyIOa5rTvAcqqJrE6qalQKfag89iDx5vD5fUrgrYtx2oBAHtK61RX0oskVjs1q1JKGnQe2b5nasaVRxuWn3ZKxxMREQGAx+PB+vXrUVRUJG3TarUoKirC6tWrVY9ZvXq1Yn8AmDhxYtT+K1asQE5ODs444wzccccdqKysbPRa3G437Ha74pZI8hEDRERE1PFFDwGihPH5A4oQKJ5B5zHb96RKKR8EQVCdkQTEbt9zS+178Q86V+Py+RXXKIZutQ1e1MdRKSXOhTIb1PNTMaxSrL6njRVKnVql1JTRPaHTAGP6Zp3SeYiIqHOrqKiA3+9Hbm6uYntubi527dqlekxJSYnq/iUlJdL9SZMm4ZprrkGvXr2wf/9+3H///bj00kuxevVq6HTqv9yZN28e/vSnP53iK2o5K/eUN70TERERdRgMpdoQeZsbEN9MKXkQJa+KEoeLB4TgeeSVRHKnv1IqALVRTPYGb1zte8mhYCnW9YthlVGn1r5nkG3TwGY+tT/uBp0WU8f0OqVzEBERnS433HCD9PXgwYMxZMgQ9OnTBytWrMDFF1+sesycOXMwe/Zs6b7dbkd+fv5pv1YiIiIiIMHte3v27MFVV12FrKws2Gw2jB07FsuXL1fsc+TIEVx22WWwWq3IycnBPffcA5+v6TCjPar3KF9XPO17TQ06B4AGT+xqJ7VQShAEqUornplSjWmIaN8TVTk8Ua9XTVITlVIWtUqpUPuefPW9jCRjzGoxIiKi1pSVlQWdTofSUuUCIaWlpcjLy1M9Ji8vr1n7A0Dv3r2RlZWFffv2xdzHZDLBZrMpbkREREStJaGh1OWXXw6fz4dvvvkG69evx9ChQ3H55ZdLpeh+vx+XXXYZPB4PfvjhB7z11lt488038fDDDyfysk8bMbwRs5OAAPibmK6tmCmlqJQKf93QSLCk1r7njjGnKpbGsh6X168aPhXXulQrqCKlhIIlq1G9ysmkuvpe9KDzU50nRURE1FKMRiNGjBiBZcuWSdsCgQCWLVuG0aNHqx4zevRoxf4AsHTp0pj7A8CxY8dQWVmJLl26tMyFExEREbWwhIVSFRUV2Lt3L+677z4MGTIE/fr1w5NPPgmn0yktb7xkyRLs2LED77zzDoYNG4ZLL70Ujz32GBYuXAiPx5OoSz9txJa7dGt49lFjc6V8/oBiRThXjEopZzMrpRShlLfpUCrFFLstzu0NqFZKHat2NnleIFztFDkfShQedC5v3xNnSoXb92IdT0RElAizZ8/Gq6++irfeegs7d+7EHXfcAYfDgWnTpgEApkyZgjlz5kj7//73v8fixYvx7LPPYteuXXjkkUewbt06zJo1CwBQX1+Pe+65B2vWrMGhQ4ewbNkyXHXVVejbty8mTpyYkNdIRERE1JSEhVKZmZk444wz8M9//hMOhwM+nw+vvPIKcnJyMGLECADBlWYGDx6sGOw5ceJE2O12bN++PVGXftqI4U2aNRymxJorteZAJd5ec1ixTayUCgQERRDVaPtegzKUuufDzZj57obwOX1+CE2UNMnDHwCYdFaeVD0Vufqe6Fh1Q6PnFInte0lGvaIiKzTLHF1TzQCUoZROG92+J3+ciIgo0a6//nrMnz8fDz/8MIYNG4ZNmzZh8eLF0nueI0eOoLi4WNr/vPPOw3vvvYe///3vGDp0KD766CN88sknGDRoEABAp9Nhy5YtuPLKK9G/f39Mnz4dI0aMwKpVq2Ayte1q4cV3jlPc33a8NkFXQkRERK0tYeUjGo0GX3/9NSZPnoyUlBRotVrk5ORg8eLFSE9PBxB7pRnxsVjcbjfcbrd0P9HLG8dLCqUs4ZAn1lypuz7YjOM1ymBHrHByRrTrNdq+5wqvzlfv9uHD9ccUjwcEwBcQpOojNfqIx579xVBM2pGHOxdtgsvnV7QSinxNtCWKxEHnWq0GySa9NBz9V+f2xEUDcjCqVwYAwCgLncRTi+EUEB5+TkRE1FbMmjVLqnSKtGLFiqht1113Ha677jrV/S0WC7766quWvLxW0y8nRXH/8he/w51F/bCz2I6//XKE4t9zIiIi6lha/JP6fffdB41G0+ht165dEAQBM2fORE5ODlatWoW1a9di8uTJuOKKKxS/GTwZ8+bNQ2pqqnRrL6vIiOFNstkgrSYXq32vot4dtU0cSu6MqExyevwIxAiB/AEBjlAllTfGczU17Fx+nEGngdWokwaTu2K078VL3hpok1VkJZn0uOCMHGnWlHymlNprNTKUIiIiapPUIqfnv96Lr7aX4rt9Fa1+PURERNR6WrxS6q677sLUqVMb3ad379745ptv8Nlnn6G6ulpa6eVvf/sbli5dirfeegv33Xcf8vLysHbtWsWx4sozja02016XNxbDm2STDgadBh6/eqWUzx9QHUAubquPCIEaPH64fI238CWb9DFbBd2+AFIitgmCgKcW70a61QCPPxwCpVoM0Gg00gDyWO178UqShVLyuVCRlU/ySq6ASruhke17REREbVJjC6a4T3EVYCIiImrbWjyUys7ORnZ2dpP7OZ3BQddarTIs0Gq1CASC4cjo0aPx+OOPo6ysDDk5OQCCK83YbDYMHDgw5rlNJlObn5+gRgyTkox6GPRawONXDaUcMWZESe17nsj2PR8cKi10IrvLi66wxBxqrhaAHatuwMsr90OvDVZGiVJDrYdmfTiUigzJ5LqlWaLaEOWSzeqVUsaIlkGNRh5KRZ9nZEF6zOcgIiKitim+Zn8iIiJqrxJWPjJ69Gikp6fjlltuwebNm7Fnzx7cc889OHjwIC677DIAwIQJEzBw4EDcfPPN2Lx5M7766is8+OCDmDlzZrsMnZoihVImvdRuphYIxao8EtvsIh9v8AQUq/HFOp/HHyPsUvkt5dGqYKjoixiqnhZaOdASCqocbr/qaxD1zUmO+RigbN9rrFJKTl4p9eXvx+Ghywfil4U9G30eIiIiSgxNI6VSDrcPu0rax2xQIiIiar6EhVJZWVlYvHgx6uvrcdFFF2HkyJH47rvv8Omnn2Lo0KEAgivJfPbZZ9DpdBg9ejR+9atfYcqUKXj00UcTddnN9v2+Cjz22Y4m5zIB4XAoxayXQhevP/p3hLFCKTH8cXgiZ0o1XiklhkquGJVSatvlq+fJh5aLQ9rFmVJVDk/M5wWaDqXk7Xs22QD4xkIpv+x6zuxiw/SxvTgklYiIqB2a/cFmTHp+FT7eeAx7Sutw21s/cXU+ajNqG7z4z4ZjjXYFEBFR4xK2+h4AjBw5ssmVYnr27Ikvvviila7o/9u787ioqvcP4J/ZAXFYBFlcEPcN9yTM1JJvarZvVmbabt/6lWWWZWpWpi22p7Zqfc1MS7PccUFTcQEFQRBlE0V2hGFnlvP7Y7iXuTN3hgFnBoHn/XrxAuaeuXPOvcNw55nnPMfxpv9wHIAxUPLOXYNsthVkSsm5oJRlQMjaP75aHZcpZTZ9r07fSKaUsb31mlKWAa3LV6tE2wZ5uwFomL5nbZ+cPo0EpTytZUrZqBGlt3NlP0IIIYS0Dq/8nsD/fCC1EOkf3I6Syjqk5Gowplcnm9lWhDjLf3+Nw5G0YkwZnI9Vj41s6e4QQkirRNWfXeTPuMuNtqkUmb4ntvqeec0oDlcTymL6XiN1nbiAlbWV/rgMrJ8OZ2LcRwdwqaRKkCnFWXTHQLw8sS8AwE0hs9guptHpe27iQSnzmlKmROqcE0IIIaSN4D58ivz0IKb/cBx/J1xp4R6R9upIWjEAYGdSnkseLzWvHAdSC1zyWIQQ4ioUlHKR8lqdzWwloCFjyVMlg0JuDLqIZRo1millFrSqqtNbDWRx2433tx2U2nbmCrJLqhCTXiwalHpkdHf4dzTW+uKm7zWGq0FlzsdDATeFFL4dGrZ3dLNz+h5FpQghhJA2jysRsCc5v4V7QohrTPr8EJ5YcxLJV6jOGiGk7WjR6XttHWMMCpmErwt16HwRJg8OtNpesPoeV1OqCYXOrWVK1Wj1Vu8DNJ4pxdXDKq3WAgCKK+tEp+8pTLKX7M2Usha82vBsBGp1emFNKTuDUgaavkcIIYS0ac+vi2vpLhDSYi4UlGNgsLqlu0EIIQ5BmVJOVKM1CAqVf3coHcxGFg8XOPJUNQSlxDKl7C10zhX3bixTisvQEqsdZbrfsipjUCpfU4M8TY2gjUQCQTFxlVnNJ4WV6XbWglf9AjtiSFdvwW32rr5HmVKEEEJI22Y6Xer0xast2BNCXI8udQkhbQkFpZyovEbL/+ymkOJUdil2JFqfc84FjjxUcj6oI1bo3Hx6HofLaKqqDzJxU9+qtXqLFfkAwL0+IFRdfz+rNaW0ejDG+EyppJwymCcjKaRSQZFRiUQiCEz5ear4nyf084ebQorPpw2zCF7ZIqgpJbdeU8pA/6kJIYSQduNKWU3jjVwkp7QaKbnOmVr1+8lsfLI71Sn7bmtsfQjcFjC07fERQtoXCko5kabGGAhSu8nxzM09AQAbYy9Zbc9No/NQykym71n+07E3U6oTF5Sq0/OBKlNe7grB/mwVOq+o1fGFRZOuWC7FLJYJZZoF1aNTB/7nO4cE4+ySybhneBe7p/kB9teUMthe8I8QQgghbczJrJLrIhBx0/L9mPLFv8hzQqDsjT8T8fWBNLsWz2nPquv0uOWTaLy6Mb6lu+I018FTnRBCHIaCUk6kqc+U6uimwLBu3gCA0qo6q+25TCl3hYwP8jSn0DmXMdXJU1m/X51ophQXlGqs0HmNVo/SKq3J75btFCIZT6b1onp1bghKdVDJ+al+cqn9Szir7Z2+RzWlCCGEkHblwdUxiD5f2NLd4KUVVNjd9kBqAV7/I6HRBXE4czcl4FhGcXO71ubtSc5DVnEVNp/KaemuOI3ewKx+mEwIIa0NBaWcqJzLlHJXwLO+YDd3mzm9gfFBIQ+lDEq5MYNI7B+OeaZUB6WxLRcs4r77eHDT9ww2M6UaK3ReqzMIglJixIJEpllQvf09+Z89TYqXm075a4za3TRTyvJ+9w3vAgB44dbedu+TEEIIIS3vz+cjrnkfB1NtB6Wq6/R8NlWdzoDvDqXjXJ5zpto14fIGT6w5iY2xl7E6Oh3ZxVX437GLVut8cnYm5l5jD1vGvxcK8UtMllMfoz2UcZj3xxmM++gAqm3UjCW2fX8oA7vPWi+rQghxHQpKOVE5nykl56eeaawEpbjsJgDwUMr5oItWb4DBwHC1sg41Wj2+3HcBJzJLBPfl9s3tg/sHxdeUspIppbbIlLJe6Ly02nqGFwAoxYJS8oagVE+ToFQHlf1T9kyZ1pQyLSDP+fjBodj76ng8Ft69WfsnhBBCSMsYGeJ7zftYezQLJZXG6xXGGA6kFuBKaTUA4EppNQYs2oVZa04CAH48nIkPdpzD5M//vebHFdOUoBTnSlkNxn18AAv/SsI3+9PAGMO+lHzk1I/BlFjYhTGGZ36JxX9/dc3KhM0JiMz48QQWbT2LuIsljTduhN7AwBjD3uR8zFpzAgXlximTLVnGwVFTSCtrdTiWUWwz+z9PU4PjmZQx1xyns69i6Y4UPPc/WsWTkOsBBaWcSFPdUFOKC6hU1IpnHJmujqeSS/kgj1ZvwEsbTmP4e1FYtDUJn0adR1ZxleC+anfjvmvqg0pc4XIuKGVt9T3ufo3XlNLbkSklVlOq4enV1ced/900U6op3E0yr0yDeByZVILenT2blH1FCCGEkLZjxHtRqNMZsDelAE+sOYkxy/cDADafMtZhOlg/xS8xp9Tmfgx2lAI4mVWCV36P54MhpqTXeC1yLLMEe5Lz8dTPsbipfgyNKayoRVRyPnYk5qGsWou9yfkWH2Q6yq6kPAxYtAvfHky32FZaVYddSXk2p5ddLK4SBBBNgzmMMaQVVNgMyOj0Bty6Ihr3rjyKp3+JRXRqIUYv3YefDmfaLAFeVqXFBztSnFKM/qt9FxCxbD8fCL0Wj/90Ag9/dww/Hs64pv1EJefj3pVHkFVUabXNhfxyfBZ1XrBA0/XGnr/Hpigsr3Xo/jjX8zEk5HpGQSkn4l6Y1G4KPihVozWIrqhXbVJPSiqV8NPh6nQGbDtjTNHeGCte2JIL1jRM3zPuy7+jccW7ilqdaB0qb/eGoBUA1Jr1i5sWWKs18CvvmQpQN6yoJzZ9z7RGVbC3O+4Z1gXDu3ujh18HQbuInp0AAPcMCwYA9A3whBjTYFM3Xw/RNoQQQghp3/q+vRPP/BLL/x6T3rRskm8OpGHE+1HIKLRdF+r5daew5XQOPt1z3mJbc4JS5kk2jfV7z9k87EoSn36UW1aNp3+JxUPfxthde+hicSWe/SUWp7OvwmBgOJpehE1WFuiZvc6YYbJs5zmLbQ99G4PZ6+KwYEsi0grKRe//6sYEjHjPeIynfXsMd3x1GJtPXUZGYQXWHbuIyE8PYs7v8Vb7mlZYgYvFVYi/VCq4/d1tyci1ERR655+z+O5QBqZ8YX+GHGMMu8/m4fLVKpvtVkSdR56mBp9FWT4fmiru4lUAwO8nrS+QBBivjfUGhl9iskSnoj7zSyxOZ5di7qYEq/v4z2eH8MW+C4Jzue3MFaw7drGZvXes7WdyEfbObkSnFjhsn9ZCXHU6A2KzSkTfqzXmh38zEPbOHvx+MvvaOkdIO9S8lBViF65+VEc3uSA7qLxGx2cxcaq0DSvvAYCyvnC4eaBIjLS+WDg/fa/+e+eObsZ91+lxtdJy+p1FoXOzAuZKuRSVdXpjppTI/Xv5eyJfY/ykQSwoVWJyHzeFDMvvHyLa/3VPh6OqTgeFTIoJ/TpjbB8/q2Pd+fLNyNPUoJe/eOCKEEIIIcTUI98fw2u39RXcJoH1oNHHu1MBAB/sOIcfZo6y2q6owngNdDq71GLbtSZtm9/dfDW/qjo9nq2fepT4zm3o6KYQBMJMs3Umf3EI++dOaPQxZ687hZRcDfYk5yOkkwcu1mfmDwhSY3AXLxw8X4iTmSU4lyceaOKczzcG8zbFXcamuMuIfTsSfp4q0bZ/nrqME1nGbK5XNxoDJ4Fq4/XrPwlX8NUjwwEYA0OLtp5FN193PDuul83HL7eyIBAAnBVZQboxOxLz8ML6UwCAjc9FYHSocaqptWAfq+9vjdYAd2XzSlY0xabYS1i09SwAIGv5VNE21hZaetUk8JdgEuB7cf1pAMD4vv5O+yB4U+wl/J1wBSunjxCssG2OO/az1py0Oj5HWbAlEZviLmPWmB54565BTbrv+9tTABhXyZx2g2NKiTDGHDID5N8LhdgUexlL7hoEH7P3oIRcDyhTyolMV9+Ty6R8wKlCpK4Uv/JefRsuyCMWTDInq3+x4oJKXNZV544NFwBi9Qi46Xt8oXOzAJjUZL/mmVJuCimCvNz538Wm7121sdKgoP9SCTq6KeCmkOGe4V2sXrgAxgujW/p1tmu/hBBCCCGAZRaSNcdNVrUzfS9oPt3HNENH7D3j/D/P4Mm1J5GUU4aIZftw51eHrWY1iTFfEfnGZfsEv5uWVajW6lFcUYtR7+/lbzMNmGQUCqduFZTX4P1tyUg3ywS7WFxp8nNDVhB3DTnzpxP4+kAa9qbkW/S3Rqu3Om1t0meHRG8HxIODeZqGANyDq4/imwNpOHO5DP87dhEf7Dhn9X4csWl/R9KKkFtWbTOD7cC5AmQWVeJKaTUe+e4Y9tQXwTZd6fChb2MAGMd7w9K9ovthDHjsx+MYsGgX8jWWUzsbY9r/xp62EgBnchoCbbU6PcpESm6I7Se3rBqbT1uuUHippOHcn71ShllrTuBoWlFj3W6yeX+cwb8XirAy2nIKaEvZFGeclbL2aNY17cfW1NPEy2U4lX3V6nZuquKaI5kY/cG+Jq3kac2MH0/g74Qr+HCXZWYjIdcDypRyoobV94yH2VMlR1Wdng9WmeICSXymVH2QJ7vEdqow0JApVac3QG9gfKaUp5sc7goZqrXiNaW8PYyfSlTWimdKcZF5sdX3uvp4QGVSM0osU0qsGDkhhBBCiKulmExt0uoN2C6yel2+pgbTvjvG/86FL1ZFp+PDXecwf0p/zB5vzNJ5Ys0Jvl1JZR3e/isRdw4J5m9LL6xEemEl9p8zTjnKLavB7HVxgkyPjMIKqwvgxF8qtfnhnmlgaNZPJ5FsViNplY03+nM2xONoejE2nLyEh0Z1AwC8Prmf1TfS9gT0+i/cBQB4SWQF5GIbH7BKG0kCOZl1FSezrvK1wABjPSlbK+z9eDiT/zkppwxP/XySz+zvH9hR9D4nMkvwxFpjEfxb+3dGTEYxYjKKrWbmnL1ShjKR0hacI2nGQNaaI1mYP6W/1XZi7lt1tEntTY398AAKy2sR93YkOpl8yJtdXMVn3TDGsHR7ikXGDHdIo5IbnltzNyagsk6P6NRCq8eiRqvHz0ezMHFAZ/TubHl8LxZXoou3O+Qi7xUAIL+sBomXyzC4i9oiK8g0SGxNcUUtfDsoodUzrIpOx819/TCiu0+j9+MkXCrF0u0peGvqAKttKmp1kEkkdme+vf7HGax4aKjF7Tq9AXd+fRgAcOad26CuzxDbfy4fdToD/jmTi8MXirD+mXAs+ScZALBoaxLWP3Oj3eOxRSxJ4Vot33kOOaXV+PLhYU6p65uSq8H3/2bglci+Tsvaq9HqkVFYiQFBHdtMbeKqOh1e25SAyYODcNfQ4Mbv0MIoU8qJyk0ypYzf5fW3N1yAcIUdGzKljG246XuXShp/8ZCZ/PHUaPV8cMldIROsWAcAPh4N6bHc9L1qrR4GA7PIlOICY1er6lBWv/oe91BdfdyhktsOShFCCCGEXA9Mp5z9EiNeK2fGj8cFvx9JK8JHu87x2QXLTWruVJp82FdQXot1x7IFAS1rTmY1FB6/dcVB3PPNEf73P08Ja4deLG78g0kAFgEpAEi4LJymxpVUSMnV4Gh9raqKWh1+OpKJn45kov/CXRbZWQ1sR6VMM8C+3J8m2ubOrw6LZlJZf0wh04LtvRfstLsm1B1fHeYDUoCw1tf5/IbnhOnUNdMgWnFFrcUb+ao6HeZtOmPX468+mI6o5PwmrcqXYFYnqym4jD7T5xkA6AwM/6uvEbX/XAF+OJzJT1PliPWwUuRDbcYY1h27iKd/jkWNVo+1R7OwbOc5vPRbvEXbnYm5GP9xNHov2Ikblu7FymjL58fm0zm48+vD+CveMmvL/G8qNqtEcCz/SbiCke/vxZJ/kvG/Yxfx2d7zuG9l04J6d39zBCeySvCAlWBgjVaPwYt3Y8CiXXafR/O/ZY7OJPBbWml8n3g0vQhPro3F7HWnsP1MLsqqtZj/ZyLfzlYA1tFMxxd3sQQPrY5BUo7wtcRgYIhOLeBfU1YfTMc/CVdww9K9FtOMOUfSipodEJv65b/YfCoHzztxVdEHV8fg9i//xbYzubh8tQpjP9wvuohDa/L9oUzsSMzDS7+dbumu2IUiCU7Erb7HBYa44BRXdPzwhSIMWbIHW+Nz+Cl0Hgrh9D17/oClJmexslbHB5fEglKmtay4oBRgDEzV6YT/eG7u4w/A+M+xqML4wtOjk7FIeXdfDz5wBgAKueVT6dOHhkIll2LNrBsaHQMhhBBCiLOYTmE7c7lUsO3LfRfw7j/JfC0kTmWd3mJqEZdN1FiGjzV7U/LxR9xlm6uhOcOI96IQd/Fqkwp8cwzMWMTZGq7ouS2JOWX8Soimvj10bavLNVW1yerNmvpMp4LyGizdkSLafuT7e/lsN863BzOQ0YTz98wvsbhn5VHBG/6KWh1+PX5RMC1UqzcIps4BwlXn4i5arqT405FMrD9uWVh7i8i0vEVbz+KR745ZXXmOm85pKwRyNL0Igxfvxtt/JWFvSj5WRqfjQP3xEQuOrjGZBldYXouPdqVatOG88nsClvxzFpevVlldbe+B1TH46UjDPrlA8dqjWYJpbptiL0GnNyDxchmW7zxnseCTWJxHZ/aYkz8/hLSCCsGCA3uS83G1sq5JQUZrtAbj+zXzYv0AwBqduNk8trKAdHoD7vr6CJ6v/3u+f1UMTmSV4JHvhYHB9SeyMWvNSdzx5b+CKcBFFXVYsCUR5mLSizH9h+N2ryJqjjstF/KvfRqjNYn1gbdNcZexKjodl69Wiy7i0JoUVzpnhUlnoel7TqQxWX0PaAhOaaq1qNMZ8MTaE9DqGV7eEI/l94UBaJi+15TMI52eQSmXok5nwFWTaXbuShnUJoEnN4VUUHDdU6WARGJ8Ya6s0/GfVkUO6AwfDyWW3D0IO5NyoanR8S+Yz4/vhdOXrmLWmB74K/4Kvy+lSE2p+0Z0xV1Dg62m6xJCCCGEuNrORGFtp0+bsFpar7d2XNNj/37ykkVJBFe5v5nTwhhrKOLc2mWaBJMeWB2D6NcmYMIn0YI2jWUqNadOVMKlUlwqqUb3TsbpRwu2JGJr/BX8fDQLe14Zj1qdHv3e3mVxv6ziKmw/k4vKOh1e/8MyOys6tdDiNgDYfTafXwDJVExGMbr6uIvcw1iHbGt8Dt7bliy6vapOh0e/F2YTfrnvAgYEqQW3McbwzC9xcFfKcE4kUPXj4Uw8NTZU9DHWHMnCmiNZmDI4EKseGyna5r1tyXhqbCgSLpUKPrw3jbfM++MMKmp1/BS4tIIKrHpsRJPeX53LK8erG+MFx+u5+sUF/DxViHnzVpv7++t0DjxVcry7LRmfTRuGEd29BdsnrjiIB0d2RWq+5cIBl682jOtYRgl+PX4R08ND7O47J/FyGfada5iOeeh8Ib7efwExGcV4Y3J/DOna0KcfD2ciMacMiTll6DF/O397udkU451JxqnPV8pqMHHFQcG2gvJaFFXUQiGVwqt+do551p49zl4pg4+HEsHeDcdeIgGSr2iQlFOGB0d1tRlg25mYi2qtHveN6AoA+GrfBRy6UIj/PRUON4X1KZiMMdEV51sjFybYOQQFpZzIdPU90+9zNyXgw13nBDWXLAqdi2QeWaN2V8BdIasPSjWkHKvkUsFqFmo3heDFUymXwkMhQ2WdHtV1er4o5p1Dg3H3sC4AgNGhvtib0vAJUVhXLzx0Qzd+/xxrL8oUkCKEEEKIPZbcNQiL/z7r9McxL1fgSi0VkLoW3OpnbZF5QMoeG05esrnd2tStw2lFeLRTd2QXV2Fr/Qe7XHaeWECK09zjP/bDA6K3c8W8xby8Id7qtoGLdovenmISeKrTGVBQXiNaDJ/z3rZk0awvUzuT8iyyxkxdKqnC3SZTXwFgt9lCAqbBkL0p+bjlk2g8P6FX/YJK9r1jr6jVwSDyclFUUYs+C3bydbY2ijwn5pisbHj/qqPo4u2OjbMjBG2snYtAtZvgtWLBliRM7B+AALUKK6PTkVdWg3fvHmQ1MJNVVImt8Vfw2V7LgPsne4y3PbAqBinvTca2M1cworuP3ZlBtoIdVXU6fsGFzGW3N6s+06WSKkz90lh3y7SOmVQiwe1fGjM91e4KTB4cKHp/vYHh+V+NfzM39/GHf0cVVtR/8LAp7jJm3Gg9uPfvBccX9G8p5tl2jDGcyi5FL/8O8Pa4/lZgpKCUE2nMa0qpGgJEBWaps1w6MZcppbIRzOnq4457h3fBgCA1fjycicV3DsT9q46irLphyVd3hQwSiUQwfU/trhBMuZNLJXBXylFZp0dlrZ7PlFLJGyLI4aGd+KCUm0KKLiafFlBNKUIIIYQ4yswxPXBjz06Y9Ln11doIaa3e2pKIR8O7Y9zH4sEiRyuqcP30nb5v77Sr3Y7ExleivPkj68dJbJt5QX3zVesuX63Ggi1JAIDbBgbY002A2a7pdN/KI/jw/iF4/c/Ga4zllFbbPYXNtAYeZ/XBdGw+dZlfHOGR0d0xMNgyS628VmdXsLVOb8CGk9n8MbGXraBUeqHltFZrYSmu8L450yCn6eILpvXgUnI1VoNSpuervEYLf5PV6GtFsgevRY1WbzPzSsyCLYnw9lBg3qSmLYBwLbafycW+lHxsPp2DTh2UiFv4H5c9tr0okuAkBgPj5y9zq++Z13cyxdeUqi90rpBbjyz/MHMU5t7WD7eHBeHP58egq48H/wfBTd/jMq7UgkwpuSB4pJBJ0UEl4x+/jg9KNbQZ07sT//Pn04YJ9qekoBQhhBBCHKhfYEer04sIae1Mp0VxbK3iR5rPvEacKVuZXKYyiiqxJ9l621PZpfjPZ64Joq89miVYrbNaq8fZK2VYtDWJD+S8uTkRQ97ZY/c+j6TZlxlUVadDra5pAR0uNlRoFhzdl5KPHvO3Y/h7UdDpDThwrgAvrj/FF043DT6ZTpc2jV9xYSfz2l4ro9NwR32WlZjP916wWlPNmuKKWhw4V2CxOml0agH6L9wlWrwfMAaFzfuXVVSJX49n45sDDbUKHVGfTIzpbl9Yfwqb6+vMFVfWIa+sBt8dSkfZdZS5S5EEJ6ms0/FPBi6Q42kzKGU2fc9GkMe0LhTHTc4Fperqf5fWP7YwU0oYlJLwQbBKk+l7pkGpQcFe+HzaMGx49kZMHhwkeExhplTbWD6TEEIIIS3rkdHdW7oLhLjM0CX2BxGIY1ipo96q/HrsIqZ+eRi/xFzElC/+Ra1O3+jUUnPVIqsrihm4aDf6vb0LF/LLEdvI1EsON03afLXTp36OBWCcytx7wU48sfYktp3JxYj3onD2SpnVzDTzd5pb43Nww9J9OJV9lb/to12pojW6OBW1Oryw/hRqdXp8ezAdqXnljQaFpnzxL55YexLrjwvH8UZ9dtxHu1LRY/52/J/JKndRyfkY9f5ezDOrA6c1mTr+1pZE/Hg4E6Fv7kCP+dtxun4cRRW1TcpyrNHqsfnUZYtgm61RPfRtDD7YcQ6v/5lg9+M4G03fcxKunpRCJuGDN6b1ncxxLwrc6ntKG0Epsf241QezuPnH3O+C6XtuCuhMJkbLZVJ+umC1SQRcaVbP6p7hXUT7QZlShBBCCHG02eN7Ib2ggv9klxBCiJD566OtumTWHLBSKN+apmSF9V+4C6utFKu3ZqqNLCfTLDEwxtc/u2/lUfz2zI2CusqcrOJKzFxzQnDbicwS/ljZU0eLK7mzcOtZVNXp8dz4XgCAfI0wCPRPwhXMGhOCkSG++Ly+ltcfcZfRP7AjZo7pAZlEIsi6M18189Hvj+PMO7fxNbmS353EJ48wxlBapYVUIsGFgnKMDPHhpz6u2JOK7//NREgnDxycdws/xuQrlosMcLLr67UdPN+08+9MFJRyEtOV97gnje3pe9YLnff07yBYylg8U8rY/mplQ00p42OaTN9zlwtWUDBmShnbVdY2ZEqZB6WsMa09RUEpQgghhDiCTCrBioeGUlCKEEJasdnr4gS/97Oz5lhjvtwvnDL3yPfHRNs9uTb2mh7HfGresp3nIJEAI7r7iLa/WFyFkSG+gtve356CpJwywar1Yqq1eizYksj/PnDRbni5K/DBvWE4kl4kCGKtmj4C4T07wbeDErvP5vOPnVtWjfSCSjz243GL/Yup0Rrwv2MXcUdYEHw6tGzxcwpKOYn5ynsA0FEkmMThglJcRNQ0UypyQAB+LM6E3sDQQSmDTGo5Va6hppQwKMXVswKMAbIabUOmlEIm5QNc5TVa0ULntpj20VYNLEIIIYSQppBIJHh6bCh+OJzZ0l0hhBDiANx7zdbio12pFrd9sMO+VQpNNRaQ4myMFa7GWFatFV19k1tdcN/c8XzWEwBELLOvkL6phX8lYVvCFfz+XETjjZ2I0lscqKSyDv8kXEGNVo9ys5X3zH82V63lCp1b1pQa06sTH9yyVpfK3Uqhc9MV/8xrSsmlEvjWR0VLqrRNz5RSNLSzNd2QEEIIIaSpulDBc0IIIa0EY8CcDadx1sbUOUeauOKgQ/ZzPNO+OmHORJlS1yintBqLtybhapUWfQM88duJSxjcRY3p4SEAhJlKHirrGUjcyhtcMMm0ENroUF90dJOjtEprNbDlVh8gKuUKnSvEa0op6wuSy6USSCQSdPI0LpNZXFGLWr1loXNblDKqKUUIIYQQ55geHoLfTmTbXEWLEEIIuR7M3XT9FA5vbSgodY06usmxN6UAAHA+z1jtPylHg/e3JRu3m2Qq2Qr2FJUbg0lcptTIEB+MCvHBqB6+8FDK6/dTLVpPCmgIQvGFzvnpe8KaUlzwiPvu52nMlCqqqG1GphTVlCKEEEKIcyjlUqx4cBju/Np68VtCCCGEtG4UlLpGajcFuni7I6e0GuW1DUXEK+trRJlmSg0MUuPpsaGo0uotKu5zSz9y0/DcFDL88fwYfjuX8WStWDoXhCrha0pJLdqr3RR8AXV5fcZUpw7GTKm8shq+nb1BKWGmFNWUIoQQQohjhXX1wpzIPujq44Gt8Tn490JRS3eJEEIIIQ7ktPSWpUuXYsyYMfDw8IC3t7dom+zsbEydOhUeHh7o3Lkz5s2bB51OJ2gTHR2NESNGQKVSoXfv3li7dq2zutxsA4I6Wt1mOt1OIpHg7TsG4qVb+1i00xkYgIbpe9b201hQihl3Y2X1PQUfSOIymzrVZ0rllDYEpeydvmdaU4oypQghhBDiDHMi++KBkV2x7L4wzJ/SHyfemtjSXSKEEEKIgzgtklBXV4cHH3wQzz//vOh2vV6PqVOnoq6uDkePHsXPP/+MtWvXYtGiRXybzMxMTJ06Fbfccgvi4+MxZ84cPP3009i9e7ezut0s/QPVVreJBZG8PawXPOdW37O2H9PpgKbcFMJT6VYf3DKd7qd2k/NZUFxmk199TSkuUwuwv2g51ZQihBBCiKt09fHA7PG90FntZnNFY0IIIYS0Hk6LJCxZsgSvvPIKwsLCRLfv2bMHycnJWLduHYYNG4YpU6bgvffewzfffIO6OuMUtNWrVyM0NBQrVqzAgAED8OKLL+KBBx7AZ5995qxuN0t/k0ypiJ6dBNvUIoXJ3RQydLCSEeVh5Xa1ndP3OFymlEwqwS39/NE3wBNdfTz4YJRcKqwpxVHKpZBI7JuKJ8yUoul7hBBCCHGNUP8OLd0FQgghhDhAi6W3xMTEICwsDAEBAfxtkyZNgkajwdmzZ/k2kZGRgvtNmjQJMTExNvddW1sLjUYj+HKm/oENQakbQn0hNYnPWAsi+XRQit5ubfreXcOCMaK7N+4YGix+PytBKQD4adYN2PXyOCjlUpNC58ZOqt0UkJt0WNWEjCeVrOEx7K1DRQghhBByrUaF+PI/3z+iKwYGWc9aJ4QQQsj1q8Vyn/Py8gQBKQD873l5eTbbaDQaVFdXw93dXXTfy5Ytw5IlS5zQa3E9OnWAUi5Fnc6A/oEd4dtBxU+H6yiSKQUAvh2UuHy1WnCbVAJ4KMSDUiNDfLH5vzdZ7YPF9D2T/UgkEnDJT1xQSl7/XSqVwLeDEgXlxv42JbhENaUIIYQQ0hJem9QXAWoV/jMwAD39PVGnM6CoohZjlu9v6a4RQgghpAmaFEmYP39+fYDD+te5c+ec1Ve7vfnmmygrK+O/Ll265NTHk8ukuCMsCH6eKowO9YV/RxW/zXT1PVMBajfR2+TNDO5Ym75nzrzQOQB08mzor71Fzk33Zb4/QgghhBBn8lDK8dz4Xujp7wnA+KFasLc7pod3b+GeEUIIIaQpmpQpNXfuXMyaNctmm549e9q1r8DAQJw4cUJwW35+Pr+N+87dZtpGrVZbzZICAJVKBZVKZXW7M3w6bRj/s2mdJrGaUgDw2m39MLSrFxIulyEq2TjGYG/rY2qMSi4MQrlZmQaokBtTpkxrQJn2tymZUlKpBAqZBFo9o5pShBBCCGlxb0zpD4VMirVHs1q6K4QQQgixQ5OCUv7+/vD393fIA0dERGDp0qUoKChA586dAQBRUVFQq9UYOHAg32bHjh2C+0VFRSEiIsIhfXAW00wpazWl+gV2RL/Ajnhz8xn+ti7XEJQyr0VlLVOKn75nUkeqk0l9q26+Hk16XKVMCq1eb/eKfYQQQgghzqJ2U+CduwbhvxN6ITW/HFq9AU+ujW3pbhFCCCHECqdFErKzsxEfH4/s7Gzo9XrEx8cjPj4eFRUVAIDbbrsNAwcOxIwZM5CQkIDdu3fj7bffxgsvvMBnOc2ePRsZGRl4/fXXce7cOaxcuRIbN27EK6+84qxuO4SvR+OZUhwPZUPQ6loypdzk5jWlxE/t0K7e8O2gxLi+DcFFrYHxPz83rleTHldVH/xq7rRDQgghhBBH66x2w819/HFr/wD8+/otLd0dh3h76gDR24d183ZtRwghhBAHclokYdGiRRg+fDgWL16MiooKDB8+HMOHD0dsrPHTKplMhm3btkEmkyEiIgKPPfYYHn/8cbz77rv8PkJDQ7F9+3ZERUVh6NChWLFiBX744QdMmjTJWd12CNP6Tp5WMqU4HUwynLp4W9aZas5jAkCon/hSyd18PRC7IBJzIvvyt4V18QJgzJ66qXenJj0uV4OKpu8RQggh5Hokk1q/Rnl6bKgLeyI0NSxI8Hsv/w7IWj4VHz8wRLT9U2NDRT903DQ7Ajtfvtlh/To0TzyIt2bWDRa3dff1gJ9JbdLxJh96fvHwMHzy4FAM7+4NAPjm0RGC+2Ytn2qxvw/uDWtOlwkhhLRiTlt9b+3atVi7dq3NNiEhIRbT88xNmDABp0+fdmDPnM+tCavSuZtkSnXxccz0vS7e7ujqY30antTs4uyxG0MgAXDP8C6QSJoWXJoREYKY9GIMDKalmAkhhBBy/bF2aRMe6oshzcwyWjPrBuRpavDm5kS72t8/oitOZpWgq487jqYXo39gR3z84BBsT8wFANzSzx8fPTAUAPDgqG5QyqV4eUO82TgkOLtkMtILK9DTrwPWHbuIG0J9oZBJMSCo4TrskdHdcHtYEGb8eAL3De+Ce0d0wYwfhXVcTU0aFIDdZ431Tdc/HY7unTxwSz9/HEgtxDt3DsQ7/ySju68H+gd1tLjvIZEstLJqLTqq5Pz15r3Du+BqVZ1gJgEn5d3J+CPuEtTuCuRrajB1SBDe2iI8pn6eKjwa3h1f7rsg2v+OKjkGd/FCTEax1TE25uSCSNywdG+z708IIaT5nBaUas/U7ran7JnqoGoIJl3b9L2G/YwO9W3SfT1VxhVsmuO/E3rjvxN6N+u+hBBCCCHO5mMSDDn//hQoZBKcvaJB34COOJxWyG87Mv9WXCyqRE9/T8z86QRS88sBAD39O+C9uwdj+g/HARgzfm7p3xmMMShkUsRdvIrfTmQDAF68pTe+PpCGsb39sO7pcHy9/wIC1G54cFQ3/nHqdAbIpRJIpRK8f89gpOaV4927Bwk+GLxraDB2JOZCU61DTEYx/jMwAIAx66tvgDE4NOsmYZbX1hduwu6zefi/W/vAXSnjM5FqtHoEebmhs9oNW1+4CcUVtfDxUGLL6RzoGcNDJn3jfP/4KOSUViOkUwfB4+yeMw6TPj8EAIIMKVNeZtfBMqmEb3vszYl4bl0cHqtfJdFdKcOMiB5828paHf/z9pfGIjbrKv4zMAABajesPZIJTY0O5hKXGGdQrIxOw0e7UrH2iRswvq8//vPZIej0BkQOCMCGk5fw+3M34lJJNWavi+Pvu/TewXBXyAT1YMWce28yZq05gWMZJXglsi8+23veZntT94/oCoVMYjyfIv13plXTR6CqTo/7RnRB6JviiQBSCdDRTYHYtyP5D9Mf/f4YjqY3P8hHrh/uChmqtfqW7gYhNkkYY6zxZq2bRqOBl5cXysrKoFY7P6OnolaHB1Ydxbi+/njrdvH5/5z/xWRh4dazAIAz79zWaA0qawo0NRj9wT4AxtTnR2lJZEIIIcThXH1N4WptdXyZRZWQSoCQTsLyBnoDw5zf4zEoWI3ZJh/QMcZQWaeHh0IGA2OQy6Q4n1+OLt7u6KCy/Ey3x/ztAIAt/x2D4d19HNr3nNJq+HuqmrRCsjm9gUEqQZMz4sUk5ZTh06jzeGNyf/QLtMyeulavbUpAjVaPrx4ZLuhvjVaP45klyC6uxH8GBuLrAxfg20GFV//TUJJCpzeI1jnV6g1QyKSIv1SKe745AgA4OG+C4PlwJK0IKbkaPHFTKHq91RDA+W7GSNw2KFCwv58OZ+Ly1Wpkl1Rhb0o+Pn1oKGRSCW7o4Yt3/0nGrrN5AIyZYNxshrJqLTTVWizcmoQgLze8f08Yiitq+ev33XPGIUCtQmzWVSjlUvQN6Igblxm3bfu/sRhcX25j0dYk/BJzUdCfIC835JbVCG57757BmHFjCP/7Tcv3I6e0WtDmyZtCsejOgRbHq6pOh4GLdlvc3phRIT6IvXgVAFcWxA8HzxdatPNQyvDtjJF4959kfPjAEBRoagXBwvfuGYyNJy8hMaesyX1oLrWbnA8aThkciJ1JeY3eRyoBDGbvpPsHdsS5vHK7H9dDKUNVnWOCRp88OBTj+/oj7mIJZq87hY3PRfDJCowxhL2zBxW1Oqx+bARmrzvlkMdsju8fHwWZFNBU6zDn93jBtmAvN1wxey4T5xObTu0I9l5TUFCqhX217wJWRBk/bbmWJ4OmRosh7+wBYPyn5oyLBEIIIaS9u56vKRyhrY/PWQrKa5BztdrhASniWFq9Af/59CACvdyw4Vnrq3lvPHkJn+89jzVPjLZ5TW0wMBSU1yLQS1gX9tXf4+GmlNlVI2v5znMor9Hi/XsG2x00/CzqPL7YdwHv3j0I943oCk+VHIwxm/fPLavGjB9PIK2gAp9NG4qbevnBv6PK6n0yCitw64qDeH1yPwzt6o2MokrcNSQY5/I0mPbdMdH7pL4/GdGphVi2IwUrHhqKkSG++CfhCoK93fDapjPILKrErDE98HhECHr6e/L3Y4zhjq8O4+wVDeZN6ofnx/eCVCrB+fxy/Bl3Gb4dlEjJ1eCjB4aisKIW+88V4PtDGfjfU6Mx/uNofj93Dg3GPwlXRPsWOaAzvNyVyC6pxPTwELgppOjd2RNKmQweKhn8PFWo0er5Or0bTmRj/uZEeChlGBnig7duH4DZ6+JwsbgKABD1yjj0CejIB6QB4PGIELx792BsP5OLo+lFWHLXIFTU6rD7bB4mDw7CygNp+PZQBj5+YAjm/WFcgZ3L3ly6PQW7k/Ow/aWbMeq9vajTG7DsvjCEdfHCoPoyKZoaHYYu2WMxtpEhPljx4FD0sFJTmFOj1aOqTg/fDkpEJedDU63FpMGBGPfRAZRU1gEwrspuPHc++Cv+Cnr7e2LGj8ehq4++3T0sGMUVdejkqcSdQ4KxdEcKRvfwxYyIECTmlKG4ohZf7U/DtzNGYkSIDzwUMvResBMA8Nz4nnjyplAEqBv+XhIulWJvSj6+2p8GL3cFEhbfBgBIL6wAYwzJueW4UlqNcX388fne89iTnC8Y05K7BkHtLoefpwo39uwEmUSCiyVVCFS7YcCiXXw7P08liirqLI7JvrnjMXHFQdHjpZJLUaszwE0hRY3WAAB4YGRXDAxS491tyRbtJRLA3sjK5EGBOF9QjozCSjw3rie+PZQh2u7mPn7490IRACD6tQmo0xtw22eH7HsQEYO7qLH+mRsx6v29qNMZ+NspKOUC1/MF1l+nc/gI8bU8GRhjeGlDPKQS4PNpwxzySRghhBBChBx5TfHNN9/g448/Rl5eHoYOHYqvvvoKo0ePttp+06ZNWLhwIbKystCnTx98+OGHuP322/ntjDEsXrwY33//PUpLS3HTTTdh1apV6NOnT4uMj5DrkSOzxlpSeY0WHZs5w+Ja5Wtq8Oj3x5BeWImQTh44MHcCn1FojU5vgM7ALBZn4hgMDAy2FyYQE5tVgl9iLmLRnQPBGDD/zzN4NLw7+gZ0RPT5QvT298TVqjrcbrawgD0Kymvg72k9cAcA8ZdKcbG4EpEDAkSzKK3R1GjBDICXR8M55AKL+ZoaJF4uw639OwtqAWv1BvSpD/DEvh2JOp0BQV5u1/xc1uoNkEkkKK/RQe0ut9jfLzFZWLT1LGaN6YF37hrU6P70BiY4j2VVWlTU6dDFRqmasmqtxdRfMbPWnEB5jQ4bn4to9O+4vEaLi8VVGBSshkQiwcmsEsz86QR+fzYCNTo9isprMSUsCO/8fRZrj2Zh0R0DMSUsEB5KOQrLaxHSyQMF5bXw8VDg1MVShPf05ae4MsZQozXg3W3JKKmsxRcPD+ef20fTivB77CUsuH0AMooq0aNTB5zL02B4Nx/B+TaVXliBlQfSMby7N3p39sSAQDVOZJVgQj9/aKq1qNUZ+FI/lbU6XL5ajZRcDeb8Hg8/TxV2vDRWEGT+6XAmHziLfm0CAtRu2J6Yiwn9/K1OvXYGCkqZuJ4vsPQGhu8OZSC8py9G0KdrhBBCyHXNUdcUv//+Ox5//HGsXr0a4eHh+Pzzz7Fp0yakpqaic+fOFu2PHj2KcePGYdmyZbjjjjuwfv16fPjhhzh16hQGDx4MAPjwww+xbNky/PzzzwgNDcXChQuRmJiI5ORkuLnZt8Lv9XzNRAi5fhRX1GLdsWw8OKrrNdXFJU1zsbgSegMTZJq5Qk5pNYIdEABzhMayAonR9XCcKChlgi6wCCGEEOIIjrqmCA8Pxw033ICvv/4aAGAwGNCtWzf83//9H+bPn2/Rftq0aaisrMS2bdv422688UYMGzYMq1evBmMMwcHBmDt3Ll577TUAQFlZGQICArB27Vo8/PDDLh0fIYQQQto3e68pml8xkRBCCCGENFldXR3i4uIQGRnJ3yaVShEZGYmYmBjR+8TExAjaA8CkSZP49pmZmcjLyxO08fLyQnh4uNV9AkBtbS00Go3gixBCCCHEVSgoRQghhBDiQkVFRdDr9QgICBDcHhAQgLw88RWf8vLybLbnvjdlnwCwbNkyeHl58V/dunVr8ngIIYQQQpqLglKEEEIIIe3Um2++ibKyMv7r0qVLLd0lQgghhLQjFJQihBBCCHEhPz8/yGQy5OcLl7bOz89HYGCg6H0CAwNttue+N2WfAKBSqaBWqwVfhBBCCCGuQkEpQgghhBAXUiqVGDlyJPbt28ffZjAYsG/fPkRERIjeJyIiQtAeAKKiovj2oaGhCAwMFLTRaDQ4fvy41X0SQgghhLQ0eUt3gBBCCCGkvXn11Vcxc+ZMjBo1CqNHj8bnn3+OyspKPPHEEwCAxx9/HF26dMGyZcsAAC+//DLGjx+PFStWYOrUqdiwYQNiY2Px3XffAQAkEgnmzJmD999/H3369EFoaCgWLlyI4OBg3HPPPS01TEIIIYQQmygoRQghhBDiYtOmTUNhYSEWLVqEvLw8DBs2DLt27eILlWdnZ0MqbUhoHzNmDNavX4+3334bb731Fvr06YO//voLgwcP5tu8/vrrqKysxLPPPovS0lKMHTsWu3btgpubm8vHRwghhBBiDwljjLV0J5xNo9HAy8sLZWVlVCuBEEIIIc3W1q8p2vr4CCGEEOIa9l5TUE0pQgghhBBCCCGEEOJyFJQihBBCCCGEEEIIIS5HQSlCCCGEEEIIIYQQ4nLtotA5VzZLo9G0cE8IIYQQ0ppx1xJttSQnXTMRQgghxBHsvWZqF0Gp8vJyAEC3bt1auCeEEEIIaQvKy8vh5eXV0t1wOLpmIoQQQogjNXbN1C5W3zMYDLhy5Qo6duwIiUTi8P1rNBp069YNly5dajcr1bS3Mbe38QI0Zhpz29Xextzexgs4d8yMMZSXlyM4OBhSadurgkDXTK0fHWPXoOPsGnScnY+OsWu0x+Ns7zVTu8iUkkql6Nq1q9MfR61Wt5snGKe9jbm9jRegMbcXNOa2r72NF3DemNtihhSHrpnaDjrGrkHH2TXoODsfHWPXaG/H2Z5rprb3ER8hhBBCCCGEEEIIue5RUIoQQgghhBBCCCGEuBwFpRxApVJh8eLFUKlULd0Vl2lvY25v4wVozO0Fjbnta2/jBdrnmFsLOjfOR8fYNeg4uwYdZ+ejY+wadJytaxeFzgkhhBBCCCGEEELI9YUypQghhBBCCCGEEEKIy1FQihBCCCGEEEIIIYS4HAWlCCGEEEIIIYQQQojLUVCKEEIIIYQQQgghhLgcBaWu0TfffIMePXrAzc0N4eHhOHHiREt3yWHeeecdSCQSwVf//v357TU1NXjhhRfQqVMneHp64v7770d+fn4L9rjpDh06hDvvvBPBwcGQSCT466+/BNsZY1i0aBGCgoLg7u6OyMhIXLhwQdCmpKQE06dPh1qthre3N5566ilUVFS4cBRN09iYZ82aZXHeJ0+eLGjTmsa8bNky3HDDDejYsSM6d+6Me+65B6mpqYI29jyXs7OzMXXqVHh4eKBz586YN28edDqdK4diN3vGPGHCBIvzPHv2bEGb1jTmVatWYciQIVCr1VCr1YiIiMDOnTv57W3tHDc23rZ2fsUsX74cEokEc+bM4W9ra+e5rWnL10zXypX/q6KjozFixAioVCr07t0ba9eutehPezhXznwNae/HOCcnB4899hg6deoEd3d3hIWFITY2lt/uqOvrM2fO4Oabb4abmxu6deuGjz76yKIvmzZtQv/+/eHm5oawsDDs2LHDOYN2Ib1ej4ULFyI0NBTu7u7o1asX3nvvPZiuX0bHuOlc9b7QEcfUnr60Kow024YNG5hSqWQ//fQTO3v2LHvmmWeYt7c3y8/Pb+muOcTixYvZoEGDWG5uLv9VWFjIb589ezbr1q0b27dvH4uNjWU33ngjGzNmTAv2uOl27NjBFixYwDZv3swAsC1btgi2L1++nHl5ebG//vqLJSQksLvuuouFhoay6upqvs3kyZPZ0KFD2bFjx9i///7LevfuzR555BEXj8R+jY155syZbPLkyYLzXlJSImjTmsY8adIktmbNGpaUlMTi4+PZ7bffzrp3784qKir4No09l3U6HRs8eDCLjIxkp0+fZjt27GB+fn7szTffbIkhNcqeMY8fP54988wzgvNcVlbGb29tY/7777/Z9u3b2fnz51lqaip76623mEKhYElJSYyxtneOGxtvWzu/5k6cOMF69OjBhgwZwl5++WX+9rZ2ntuStn7NdK1c9b8qIyODeXh4sFdffZUlJyezr776islkMrZr1y6+TXs4V858DWnvx7ikpISFhISwWbNmsePHj7OMjAy2e/dulpaWxrdxxPV1WVkZCwgIYNOnT2dJSUnst99+Y+7u7uzbb7/l2xw5coTJZDL20UcfseTkZPb2228zhULBEhMTXXMwnGTp0qWsU6dObNu2bSwzM5Nt2rSJeXp6si+++IJvQ8e46VzxvtBRx9SevrQmFJS6BqNHj2YvvPAC/7ter2fBwcFs2bJlLdgrx1m8eDEbOnSo6LbS0lKmUCjYpk2b+NtSUlIYABYTE+OiHjqW+YuPwWBggYGB7OOPP+ZvKy0tZSqViv3222+MMcaSk5MZAHby5Em+zc6dO5lEImE5OTku63tzWQtK3X333Vbv09rHXFBQwACwgwcPMsbsey7v2LGDSaVSlpeXx7dZtWoVU6vVrLa21rUDaAbzMTNmDFqYXoiba+1jZowxHx8f9sMPP7SLc8xYw3gZa9vnt7y8nPXp04dFRUUJxtleznNr1davmRzNWf+rXn/9dTZo0CDBY02bNo1NmjSJ/72t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\n"},"metadata":{}},{"execution_count":13,"output_type":"execute_result","data":{"text/plain":"<stable_baselines3.dqn.dqn.DQN at 0x7e635a20ba90>"},"metadata":{}}],"execution_count":13},{"cell_type":"markdown","source":"# Validation","metadata":{}},{"cell_type":"code","source":"from stable_baselines3.common.evaluation import evaluate_policy\neval_env = DummyVecEnv([lambda: LEASCHEngine(achievable_data_rate=valid_data_rate, episode_len=l_episode, num_ues=3)])\nbest_model = DQN.load(\"/kaggle/working/logs/best_model/best_model.zip\")\nmean_reward, std_reward = evaluate_policy(\n    best_model, \n    eval_env, \n    n_eval_episodes=50, \n    deterministic=True,\n    render=False\n)\n\nprint(f\"Mean Reward: {mean_reward:.2f} ± {std_reward:.2f}\")","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Testing and Scheduling Performance Evaluations","metadata":{}},{"cell_type":"code","source":"from stable_baselines3 import DQN\n# model.save(\"dqn_leasch_model\")\n\nbest_model = DQN.load(\"/kaggle/working/logs/best_model/best_model.zip\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-20T03:36:36.650681Z","iopub.execute_input":"2025-06-20T03:36:36.651085Z","iopub.status.idle":"2025-06-20T03:36:36.671382Z","shell.execute_reply.started":"2025-06-20T03:36:36.651057Z","shell.execute_reply":"2025-06-20T03:36:36.670412Z"}},"outputs":[],"execution_count":59},{"cell_type":"code","source":"best_model = model","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-08T13:58:15.250622Z","iopub.execute_input":"2025-08-08T13:58:15.251013Z","iopub.status.idle":"2025-08-08T13:58:15.256243Z","shell.execute_reply.started":"2025-08-08T13:58:15.250986Z","shell.execute_reply":"2025-08-08T13:58:15.255048Z"}},"outputs":[],"execution_count":14},{"cell_type":"code","source":"#Generate eligibility matrix\nG = np.zeros(valid_data_rate.shape)\nfor symbol_idx in range(G.shape[0]):\n    for rgb_idx in range(num_subcarriers):\n        while(1):\n            g = np.random.randint(0,2,num_ut)\n            if np.sum(g)>0:\n                G[symbol_idx,rgb_idx,:]=g\n                break","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-08T13:58:21.647343Z","iopub.execute_input":"2025-08-08T13:58:21.647677Z","iopub.status.idle":"2025-08-08T13:58:22.504480Z","shell.execute_reply.started":"2025-08-08T13:58:21.647652Z","shell.execute_reply":"2025-08-08T13:58:22.503308Z"}},"outputs":[],"execution_count":15},{"cell_type":"code","source":"valid_data_rate_2 = valid_data_rate","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-08T13:58:29.699424Z","iopub.execute_input":"2025-08-08T13:58:29.699757Z","iopub.status.idle":"2025-08-08T13:58:29.704623Z","shell.execute_reply.started":"2025-08-08T13:58:29.699733Z","shell.execute_reply":"2025-08-08T13:58:29.703417Z"}},"outputs":[],"execution_count":16},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport numpy as np\n\ndeploy_env = LEASCHEngine(episode_len=l_episode, num_ues=num_ut, deploy_mode=True)\n\nvalid_data_rate_norm=valid_data_rate_2/valid_data_rate_2.max()\n\nut_scheduled_leasch_hist = np.zeros([valid_data_rate_norm.shape[0],valid_data_rate_norm.shape[1]]);\nschedule_count = np.zeros(num_ut)\n\ninvalid_sched_cnt = 0\nfor symbol_idx in range(valid_data_rate_norm.shape[0]):\n    # Setup the initial state at the begging of each episode\n    g_t = G[symbol_idx,0,:]\n    d_t = valid_data_rate_norm[symbol_idx,0,:]\n    deploy_env.set_external_inputs(g_t, d_t)\n    state = deploy_env.reset()\n\n    # Reset total reward\n    total_reward=0\n    done = False\n    for rgb_idx in range(l_episode):\n        action, _ = best_model.predict(state, deterministic=True)\n        # print(\"rgb_idx:\",rgb_idx, deploy_env.f, action)\n\n        if g_t[action]==0:\n            invalid_sched_cnt +=1\n            action = np.argmax(g_t*d_t)\n\n        ut_scheduled_leasch_hist[symbol_idx,rgb_idx]=action\n        schedule_count[int(action)] += 1\n        if rgb_idx==(l_episode-1):\n            break\n            \n        g_t = G[symbol_idx,rgb_idx+1,:]\n        d_t = valid_data_rate_norm[symbol_idx,rgb_idx+1,:]\n        deploy_env.set_external_inputs(g_t, d_t)\n        state, reward, done, _ = deploy_env.step(action)\n        total_reward += reward\n       \n    print(\"Total Reward\",total_reward)\n\ndeep_scheduler = scheduler_wrapper(num_ut,ut_scheduled_leasch_hist,valid_data_rate_2)\n# Plot\nplt.figure(figsize=(10, 5))\nplt.bar(np.arange(num_ut), schedule_count)\n\nplt.xticks(list(range(num_ut)))\nplt.xlabel(\"UE Index\")\nplt.ylabel(\"Number of RBGs Assigned\")\n\nplt.title(\"Scheduling Fairness\")\nplt.grid(True)\nplt.tight_layout()\nplt.show()\n\n# Print fairness metric\nprint(f\"Std deviation of scheduling count: {np.std(schedule_count/np.max(schedule_count)):.2f}\")\nprint(f\"Number of invalide scheduling: {invalid_sched_cnt}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-08T13:58:31.915689Z","iopub.execute_input":"2025-08-08T13:58:31.915990Z","iopub.status.idle":"2025-08-08T13:58:52.971922Z","shell.execute_reply.started":"2025-08-08T13:58:31.915969Z","shell.execute_reply":"2025-08-08T13:58:52.970488Z"}},"outputs":[{"name":"stdout","text":"Total Reward 43.28396265064057\nTotal Reward 54.14965732267851\nTotal Reward 47.053780133695874\nTotal Reward 58.33707902204852\nTotal Reward 47.60454158396814\nTotal Reward 57.16723468650911\nTotal Reward 44.92451016292671\nTotal Reward 51.96387876864907\nTotal Reward 61.756700038021314\nTotal Reward 57.76993900478259\nTotal Reward 48.1443239589049\nTotal Reward 43.214579817547516\nTotal Reward 43.61818202423666\nTotal Reward 63.43352779127691\nTotal Reward 47.95606686745087\nTotal Reward 42.88551470858659\nTotal Reward 37.52640620259803\nTotal Reward 58.05125361068776\nTotal Reward 60.15567886744434\nTotal Reward 56.431992568102174\nTotal Reward 25.342588417492212\nTotal Reward 26.6124749487344\nTotal Reward 28.849152510776246\nTotal Reward 36.81546691092323\nTotal Reward 30.33371881641734\nTotal Reward 36.60109481774885\nTotal Reward 35.94708931496214\nTotal Reward 32.05400340301517\nTotal Reward 42.66023357242433\nTotal Reward 42.36753339052292\nTotal Reward 37.49758129019694\nTotal Reward 36.38742406223716\nTotal Reward 49.48349938866261\nTotal Reward 36.276813687120445\nTotal Reward 34.503204257367344\nTotal Reward 38.18123601832612\nTotal Reward 31.60369643747838\nTotal Reward 34.896565586375885\nTotal Reward 38.52930405841181\nTotal Reward 39.21759752525368\nTotal Reward 25.740273210984494\nTotal Reward 28.431294276961573\nTotal Reward 25.355709238826876\nTotal Reward 30.664843491848384\nTotal Reward 30.327141970980268\nTotal Reward 35.78132997341456\nTotal Reward 39.60288730738255\nTotal Reward 38.77067526223324\nTotal Reward 39.22430464410177\nTotal Reward 52.124845279319736\nTotal Reward 42.79249481287349\nTotal Reward 33.79082577423688\nTotal Reward 47.42300048548611\nTotal Reward 35.77990005774009\nTotal Reward 41.66326033553256\nTotal Reward 36.287250686780716\nTotal Reward 43.872367557198636\nTotal Reward 36.04007237171996\nTotal Reward 44.53846630255196\nTotal Reward 56.16580599509666\nTotal Reward 5.61490629117028\nTotal Reward 10.252908422579113\nTotal Reward 14.364194051723114\nTotal Reward 6.874652818409751\nTotal Reward 22.029763303284156\nTotal Reward 14.977439702558526\nTotal Reward 11.83345568642201\nTotal Reward 8.908051208867974\nTotal Reward 9.908064947198097\nTotal Reward 12.816809678025601\nTotal Reward 11.738847757439238\nTotal Reward 19.966562438464283\nTotal Reward 9.881188138831313\nTotal Reward 16.383937089807226\nTotal Reward 13.593997580688661\nTotal Reward 16.48906019263387\nTotal Reward 12.209830583853687\nTotal Reward 15.467397411901645\nTotal Reward 26.257990161170362\nTotal Reward 18.377097655636195\nTotal Reward 5.431070137031355\nTotal Reward 15.791064220483786\nTotal Reward 27.55000101532837\nTotal Reward 15.63913146130196\nTotal Reward 42.637643484591614\nTotal Reward 27.195372944119406\nTotal Reward 29.444398615455107\nTotal Reward 44.153967895644556\nTotal Reward 38.60390627455634\nTotal Reward 20.902118285845418\nTotal Reward 46.58388076672772\nTotal Reward 37.8647056879401\nTotal Reward 34.994440248861444\nTotal Reward 23.887918369783762\nTotal Reward 37.612930022558814\nTotal Reward 36.350401624399595\nTotal Reward 34.91920309237961\nTotal Reward 33.567267063170455\nTotal Reward 27.735440944016517\nTotal Reward 33.70679576505424\nTotal Reward 8.88528428105391\nTotal Reward 12.72276325527634\nTotal Reward 11.524623439064571\nTotal Reward 16.196142122897697\nTotal Reward 16.756859279195535\nTotal Reward 26.8657935771344\nTotal Reward 24.363400725240027\nTotal Reward 26.948648841596466\nTotal Reward 17.95642721755927\nTotal Reward 26.511701103821093\nTotal Reward 22.03666617073109\nTotal Reward 22.036080752359048\nTotal Reward 21.211864637421563\nTotal Reward 21.492771516075635\nTotal Reward 15.045359084075415\nTotal Reward 30.193532712781316\nTotal Reward 20.873586549178683\nTotal Reward 18.72990819242997\nTotal Reward 25.00621438465232\nTotal Reward 20.836284444396647\nTotal Reward 19.372086256923666\nTotal Reward 17.35607984142975\nTotal Reward 22.83452617113351\nTotal Reward 18.816872456260185\nTotal Reward 24.160521215689673\nTotal Reward 19.207699526696928\nTotal Reward 14.196411460946214\nTotal Reward 32.82979826275938\nTotal Reward 26.829474668944435\nTotal Reward 30.675211418414527\nTotal Reward 28.703654201497834\nTotal Reward 22.296674264863796\nTotal Reward 16.440256740279576\nTotal Reward 16.667007908849715\nTotal Reward 26.76751298507508\nTotal Reward 20.590469518817923\nTotal Reward 41.60814553027065\nTotal Reward 29.75484085392342\nTotal Reward 25.903909106401503\nTotal Reward 32.41824696693989\nTotal Reward 24.07139065599075\nTotal Reward 22.042012471255344\nTotal Reward 31.772938011248105\nTotal Reward 40.190803123827486\nTotal Reward 46.41273049853298\nTotal Reward 34.82665258489758\nTotal Reward 25.5524651108094\nTotal Reward 40.952384191434874\nTotal Reward 26.588871137630978\nTotal Reward 31.419558312084483\nTotal Reward 37.37440747482488\nTotal Reward 37.36118324074154\nTotal Reward 45.87878769694581\nTotal Reward 36.4593729529645\nTotal Reward 42.626597791070715\nTotal Reward 22.153387457483262\nTotal Reward 35.67604916686759\nTotal Reward 25.069384633094025\nTotal Reward 33.73955736594989\nTotal Reward 37.08794002766608\nTotal Reward 14.871782411468663\nTotal Reward 21.310897003860784\nTotal Reward 24.80132916488697\nTotal Reward 25.590789909184412\nTotal Reward 27.06690560705045\nTotal Reward 33.61598963083228\nTotal Reward 20.611886111587296\nTotal Reward 28.33689908132136\nTotal Reward 18.975081339428073\nTotal Reward 25.793562389974866\nTotal Reward 21.213858674587257\nTotal Reward 17.252678841867738\nTotal Reward 34.10171595549482\nTotal Reward 29.360590411675815\nTotal Reward 37.375468275485495\nTotal Reward 24.973845335374612\nTotal Reward 18.832315233318415\nTotal Reward 28.50711867493111\nTotal Reward 20.120011850871585\nTotal Reward 26.479235555814267\nTotal Reward 9.36193571480523\nTotal Reward 25.757632900066007\nTotal Reward 16.602207111239874\nTotal Reward 20.630990255846072\nTotal Reward 15.814097799841269\nTotal Reward 25.59026979062809\nTotal Reward 24.1134056950832\nTotal Reward 30.118762186325224\nTotal Reward 23.8570362174248\nTotal Reward 23.939352325483117\nTotal Reward 21.413016394381017\nTotal Reward 25.803110672575027\nTotal Reward 27.406037606207825\nTotal Reward 20.51708694120357\nTotal Reward 22.694245269562796\nTotal Reward 31.317024222461804\nTotal Reward 25.477005486088167\nTotal Reward 22.7872126492233\nTotal Reward 23.811962326886917\nTotal Reward 31.023544618244266\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_35/3675474765.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     41\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Total Reward\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mtotal_reward\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     42\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 43\u001b[0;31m \u001b[0mdeep_scheduler\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mscheduler_wrapper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnum_ut\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mut_scheduled_leasch_hist\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mvalid_data_rate_2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     44\u001b[0m \u001b[0;31m# Plot\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     45\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfigsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'scheduler_wrapper' is not defined"],"ename":"NameError","evalue":"name 'scheduler_wrapper' is not defined","output_type":"error"}],"execution_count":17},{"cell_type":"markdown","source":"## Set up PF Scheduling","metadata":{}},{"cell_type":"code","source":"class scheduler_wrapper:\n    def __init__(self,num_ut,scheduled_hist,se_achievable_hist):\n        self.num_ue=num_ut\n        self.scheduled_hist=np.array(scheduled_hist)\n        self.achieved_rate=self.achieved_rate_calc(se_achievable_hist)\n        self.pf_metric=np.sum(np.log(self.achieved_rate))\n        \n    def achieved_rate_calc(self,se_achievable_hist):\n        is_scheduled_hist = tf.one_hot(self.scheduled_hist, num_ut, dtype=tf.float32)\n        achieved_rate = np.sum(se_achievable_hist * is_scheduled_hist.numpy(), axis=(-2,-3))\n        return achieved_rate\n        \n    def dist_plot(self):\n        cmap = plt.get_cmap('Set1', self.num_ue)\n        plt.figure(figsize=(7,5))\n        plt.imshow(self.scheduled_hist.T,cmap=cmap,aspect='auto')\n        cbar = plt.colorbar(ticks=np.arange(self.num_ue))\n        cbar.ax.set_yticklabels([f'User {ut+1}' for ut in range(self.num_ue)])\n        plt.gca().invert_yaxis()\n        plt.xlabel('OFDM symbols')\n        plt.ylabel('Subcarriers')\n        \n    def dist_stat(self):\n        for ut in range(self.num_ue):\n            perc_ut = 100*(self.scheduled_hist==ut).sum()/(self.scheduled_hist.size)\n            print(f'User {ut + 1} is scheduled on {perc_ut:.2f}% of available resources')\n        \n    def jfi_calc(self):\n        scheduled_hist = np.array(self.scheduled_hist)\n        scheduling_stats = np.ones([1,self.num_ue])\n        for ut in range(self.num_ue):\n            scheduling_stats[0,ut]=(scheduled_hist==ut).sum()\n        self.jfi = (scheduling_stats.sum())**2/(self.num_ue*np.sum(scheduling_stats**2))\n        return self.jfi","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-20T02:56:29.943276Z","iopub.execute_input":"2025-06-20T02:56:29.943697Z","iopub.status.idle":"2025-06-20T02:56:29.955956Z","shell.execute_reply.started":"2025-06-20T02:56:29.943669Z","shell.execute_reply":"2025-06-20T02:56:29.955040Z"}},"outputs":[],"execution_count":20},{"cell_type":"code","source":"# Sionna components\nfrom sionna.phy import config, Block\nfrom sionna.phy.constants import BOLTZMANN_CONSTANT\nfrom sionna.sys import PFSchedulerSUMIMO\n\n# Instantiate the scheduler\nscheduler = PFSchedulerSUMIMO(\n    num_ut,\n    num_subcarriers,\n    num_ofdm_symbols,\n    beta=.95)\n\n# Use XLA compilation to speed up simulations\n@tf.function(jit_compile=True)\ndef scheduler_xla(rate_last_slot, rate_achievable_curr):\n    return scheduler(rate_last_slot, rate_achievable_curr)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-20T02:57:10.528260Z","iopub.execute_input":"2025-06-20T02:57:10.529073Z","iopub.status.idle":"2025-06-20T02:57:10.545756Z","shell.execute_reply.started":"2025-06-20T02:57:10.529043Z","shell.execute_reply":"2025-06-20T02:57:10.544792Z"}},"outputs":[],"execution_count":22},{"cell_type":"code","source":"def pf_scheduling_eval(num_slots,num_ut,num_subcarriers,num_ofdm_symbols,se_achievable_hist,G,scheduler):\n    # Initialize the achieved rate and scheduling decisions history\n    se_achieved_hist = np.zeros([num_slots, num_ut])\n    ut_scheduled_hist = np.zeros([num_slots, num_ofdm_symbols, num_subcarriers])\n    \n    # Initialize the rate achieved in the last slot to 0\n    se_last_slot = tf.zeros([num_ut], dtype=tf.float32)\n    \n    #Embedding eligibility throught setting data rate to zero\n    pf_data_rate = se_achievable_hist*G\n    # pf_data_rate = se_achievable_hist\n    for slot in range(num_slots):\n        # Extract the achievable rate in the current slot\n        se_achievable_curr = pf_data_rate[slot*num_ofdm_symbols:(slot+1)*num_ofdm_symbols, :]\n    \n        # Schedule users in the current slot across the resource grid\n        is_scheduled = scheduler(se_last_slot,\n                                 se_achievable_curr)\n        \n        # Sum spectral efficiency over scheduled resources in the current slot\n        is_scheduled_re = tf.reduce_all(is_scheduled, axis=-1)\n        se_last_slot = tf.cast(\n            is_scheduled_re, se_achievable_curr.dtype) * se_achievable_curr\n        se_last_slot = tf.reduce_sum(se_last_slot, axis=[-2, -3])\n    \n        # User scheduled in each resource element\n        # [num_ofdm_sym, num_subcarriers]\n        ut_scheduled = tf.argmax(tf.reduce_sum(\n            tf.cast(is_scheduled, tf.int32), axis=-1), axis=-1)\n    \n        \n        # Store the results\n        se_achieved_hist[slot, :] = se_last_slot.numpy()\n        ut_scheduled_hist[slot, :] = ut_scheduled.numpy()\n    \n    \n    # Reshape the scheduling history\n    ut_scheduled_hist = np.reshape(ut_scheduled_hist,\n                                   [num_slots*num_ofdm_symbols, num_subcarriers])\n\n    #Checking and fixing invalid scheduling\n    invalid_cnt=0\n    for x in range(G.shape[0]):\n        for y in range(G.shape[1]):\n            action = ut_scheduled_hist[x,y]\n            if G[x,y,int(action)]==0:\n                invalid_cnt+=1\n                ut_scheduled_hist[x,y]=np.argmax(pf_data_rate[x,y])\n    print(invalid_cnt)\n    \n    pf_scheduler = scheduler_wrapper(num_ut,ut_scheduled_hist,se_achievable_hist)\n    # pf_scheduler.dist_plot()\n    return pf_scheduler","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-20T02:57:13.244872Z","iopub.execute_input":"2025-06-20T02:57:13.245178Z","iopub.status.idle":"2025-06-20T02:57:13.257368Z","shell.execute_reply.started":"2025-06-20T02:57:13.245160Z","shell.execute_reply":"2025-06-20T02:57:13.256212Z"}},"outputs":[],"execution_count":23},{"cell_type":"code","source":"pf_scheduler =  pf_scheduling_eval(100,num_ut,num_subcarriers,num_ofdm_symbols,valid_data_rate,G,scheduler)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-20T02:57:16.427040Z","iopub.execute_input":"2025-06-20T02:57:16.427362Z","iopub.status.idle":"2025-06-20T02:57:17.193259Z","shell.execute_reply.started":"2025-06-20T02:57:16.427343Z","shell.execute_reply":"2025-06-20T02:57:17.191958Z"}},"outputs":[{"name":"stdout","text":"0\n","output_type":"stream"}],"execution_count":24},{"cell_type":"code","source":"print(pf_scheduler.jfi_calc(),pf_scheduler.achieved_rate.sum())\nprint(deep_scheduler.jfi_calc(),deep_scheduler.achieved_rate.sum())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-20T03:37:11.556764Z","iopub.execute_input":"2025-06-20T03:37:11.557713Z","iopub.status.idle":"2025-06-20T03:37:11.565690Z","shell.execute_reply.started":"2025-06-20T03:37:11.557678Z","shell.execute_reply":"2025-06-20T03:37:11.564302Z"}},"outputs":[{"name":"stdout","text":"0.9983054512064036 260751.74946949384\n0.9858225023257879 262862.3793598561\n","output_type":"stream"}],"execution_count":61},{"cell_type":"code","source":"print(pf_scheduler.jfi_calc(),pf_scheduler.achieved_rate.sum())\nprint(deep_scheduler.jfi_calc(),deep_scheduler.achieved_rate.sum())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-19T09:10:37.224002Z","iopub.execute_input":"2025-06-19T09:10:37.224390Z","iopub.status.idle":"2025-06-19T09:10:37.231942Z","shell.execute_reply.started":"2025-06-19T09:10:37.224364Z","shell.execute_reply":"2025-06-19T09:10:37.231302Z"}},"outputs":[{"name":"stdout","text":"0.9936658120910473 354650.589114849\n0.9269947221413888 370222.0033522247\n","output_type":"stream"}],"execution_count":105}]}